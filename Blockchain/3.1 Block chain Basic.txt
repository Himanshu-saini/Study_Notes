Requirements:
--------------
- Install Nodejs
- Install Ganache 
  - used to run personal blockchain test network
- Install truffle  
  - used to deploy etherium smart contract. 
  - Tool to develop, test and deploy smart contract. 
  - It gives development console and allow us to 
    develop client side applications.
  - $ npn install –g tuffle@5.0.5
- Install metamask (chrome Extension)
  - to access blockchain network
- Install other project dependencies
  - $ npn install
- Web3
  - javascript library to communicating with the blockchiain

Steps to create new Project
-----------------------------
- Initialize project directory:
  - $ truffle init
- Write a smart contract 
  - Note: Use contract name same as file name
- Compile smart contract:
  $ truffle compile

- Migrate smart contract to blockchian:
  - Create a migrate script before it inside 
    project/migrations
    - Note : the migration files are numbered so that 
      Truffle knows which order to run them in.
    - 2_deploy_contract.js	
	------------------------
    const Marketplace = artifacts.require("Marketplace");	//import contract
    module.exports = function(deployer) {
      deployer.deploy(Marketplace);				//deploy contract
    };

//migrating the blockchain from one state to another 
•	$ truffle migrate
 We can re-run our migrations with the --reset flag to migrate the smart contracts to the network. It will create a new copy of the smart contract on the blockchain:
•	$ truffle migrate –reset

Open truffle console: Allow us to interact with the blockchain
$truffle console

Get list of account connected to the blockchain: 
$accounts = await web3.eth.getAccounts()	//inside truffle console or in smart contract function

Get current block number in the blockchain:
$ blockNumber = await web3.eth.getBlockNumber()

Now we can get a deployed copy of the smart contract inside the console with JavaScript like this:
marketplace = await Marketplace.deployed()
marketplace.address	// to obtain the address of the smart contract on the blockchain

To get the value of the variable in the smart contract:
Name = await marketplace.name()     //solidity create a default getter function for the state variable with same name

Run test:   // create test file then run
$ truffle test

Async/await
Function call, like deployed() in blockchain are by default asynchronous
Await is used to tell the program to wait for the execution of the function
Await can only be used in async() funciton







=======================
Connect IPFS and React 
=======================

Dependencies
============
- Nodejs
- Metamask Extention
- A private blockchain network (Ex. Ganache)
- Truffle
  - for Testing and deploying smart contracts

Connect to IPFS 
=================
- We can use node on IPFS or be a node on IPFS 
- Infura : Blockchain node as a Service platform
  - provide API for Etherium and IPFS 
  - We can use public infura IPFS API to store files on a node in IPFS 

- Install package
  - $ npm install --save ipfs-http-client

- JS code
  --------
  - Import :
    const ipfsClient = require('ipfs-http-client')
  
  - Connect to Local server:
    const ipfs = ipfsClient({ host: 'localhost', port: '5001', protocol: 'http' })
    const ipfs = ipfsClient('http://localhost:5001') 
  
  - connect to ipfs daemon API server
    const ipfs = ipfsClient({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' })
    const ipfs = ipfsClient('https://ipfs.infura.io:5001') // replace API url
	

- Reference
  - https://www.npmjs.com/package/ipfs-http-client
  - To connect react with IPFS 
  
Connect React and IPFS 
========================

- HTML form for file upload 
  --------------------------
  <img src={this.state.fileURL} className="displayImg" />
  <form onSubmit={this.onSubmit} >
    <input type="file" onChange={this.precessFile} />
    <input type="submit" />
  </form>

- Create State object in react:
  constructor(props) {
    super(props);
	this.state = {
	  buffer: null,
	  fileHash: null,
	  fileURL: null
	};
  }

- JS function for file upload button:
  processFile = (event) => {
    event.preventDefault();  // Prevent default Behaviour of button
	console.log("File processing ....");
	
	const file = event.target.files[0];  // Read file 
	const reader = new window.FileReader();  // Create a Buffer 
	reader.readArrayBuffer(file);  // Convert file to buffer 
	reader.onloadend = () => {
	  this.setState({ buffer: Buffer(reader.result) });
	  console.log('buffer created');
	}
  }
  - Load file into buffer to send to IPFS 
  - HTML :
    <input type="file" onChange={this.precessFile} />

- JS function for Submit button:
  const ipfsClient = require('ipfs-http-client')
  const ipfs = ipfsClient({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' })
  onSubmit = (event) => {
    event.preventDefault();
	console.log("Submitting the form")
	// connect to IPFS 
	ipfs.add(this.state.buffer, (error,result) => {
	  console.log('IPFS result',result);  // contain the Hash address
	  if(error) {
	    console.error(error);
		return;
	  }
	  // store file on blockchain 
	  // URL: https://ipfs.infura.io/ipfs/<HASH>
	  const fileHash = result[0].hash;
	  this.state.contract.methods.set(fileHash).send({from:this.state.account}).then((res) => {
	    this.setState({ fileHash })
	    this.setState({ fileURL = 'https://ipfs.infura.io/ipfs/'+result[0].hash })
	  });
	});
  }

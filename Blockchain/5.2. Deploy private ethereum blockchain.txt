Private Ethereum Blockchain
===========================

- Download and install Go-etherium
- This will allow us to interect with the ethereum blockchain
- To create a private blockchain, create a genesis block 
  in the blockchain network
  
- Create a configuration file for the genesis block
  ---------------------------------------------------
  - genesis.json  // custom name
  {
    "config": {
        "chainId": 15,
        "homesteadBlock": 0,
        "eip150Block": 0,
        "eip155Block": 0,
        "eip158Block": 0
    },
    "difficulty": "400000",
    "gasLimit": "2100000",
    "alloc": {
        "[Account #1 Address]": { "balance": "1000000000000000000" },
        "[Account #2 Address]": { "balance": "2000000000000000000" },
    }
  }
  - config
    - the config block defines the settings for our custom chain 
	  and has certain attributes to create a private blockchain
    
	- chainId: 
      - identifies our blockchain, 
	  - the main Ethereum chain has its own ID, 
	    but we will set it to a unique value for our private chain.
	  - used in replay protection.
    - homesteadBlock: 
	  - Homestead is the second major version of the 
	    Ethereum platform and is the first production release 
		of Ethereum. 
	  - It includes several protocol changes. 
	  - Since we are already on homestead version, 
	    this attribute is 0.
	- eip155Block/eip158Block: 
	  - Homestead version was released with a few 
	    backward-incompatible protocol changes, 
		and therefore requires a hard fork. 
	  - These protocol changes/improvements  proposed 
	    through a process Ethereum Improvement Proposals(EIPs). 
	  - Our chain however won’t be hard-forking for these 
	    changes, so leave as 0
  - difficulty:
    - This value is used to control the Block generation 
	  time of a Blockchain. 
	- The higher the difficulty, the statistically more 
	  calculations a Miner must perform to discover a 
	  valid nounce for a block.
	- On our test network, we  will keep this value low 
	  to avoid waiting during tests, since the generation 
	  of a valid Block is required to execute a transaction 
	  on the Blockchain.
  - gasLimit:  
    - This is the total amount of gas that can be used in each block.
	- Gas is Ethereum's fuel that is spent during transactions
	- set this value pretty high to avoid hitting the limit and 
	  slowing down your network.
  - Alloc: 
    - Here you can allocate ETH to specific addresses.
	- This won’t create the account for you, so make sure 
	  its an account you already have control of.
    - You will need to add the account to your private chain 
	  in order to use it and to do so you need access to the 
	  keystore/utc file

- Create a Account
  ----------------
  - $ geth account new --datadir <path-to-data-directory>
  - This will generate a public/private key pair for you 
    — and will be password protected
  - By default,keys are stored inside, <datadir>/keystore

- Initialize and start new nodes 
  ------------------------------
  - $ geth --identity "blockchain_name" -datadir <path-to-node-data-directory> init <path-to-genesis-block>
  
  - datadir: 
    - data directory for the databases and keystore
  - init: 
	- bootstrap and initialize a new genesis block 
	  with the provided json file.
  - identity
    - -identity "<your identity>"
	- custom node name
	
- Start node 
  -----------
  - $ geth --identity "name_of_your_node" --rpc 
    --rpcport "8000" --rpccorsdomain "*" 
	--datadir "/PATH_TO_NODE/" --port "30303" 
	--nodiscover --rpcapi "db,eth,net,web3,personal,miner,admin" 
	--networkid 1900 --nat "any"
  - identity
	- custom node name
  - networkid
    - differentiates this ethereum network
    - All the miners who want to connect to this network, 
	  have to use the same networkid along with 
	  the same genesis block
  - rpc: 
    - enables an HTTP-RPC server
	- Wallet applications can connect to this mining node 
	  over http.
  - rpcaddr: 
    - specifies the HTTP-RPC server listening interface 
    - default: “localhost”
  - rpcport: 
    - specifies the HTTP-RPC server listening port 
	- default: 8545
  - rpcapi: 
    - specifies the API’s offered over the HTTP-RPC interface 
    - default: “eth,net,web3”
  - rpccorsdomain: 
    - enables CORS by specifying a comma separated list of 
	  domains from  which to accept cross origin requests
	- This is useful when using browser based solidity editors 
	  (remix) to deploy smart contracts or browser based wallets
  - nodiscover: 
    - disables the peer discovery mechanism
	- None of the other nodes in the network will 
	  not be able to find your node
	- Do not use it if you want others to join your network 
  - console: 
	- start the mining node with an interactive 
	  javascript environment.

  - Fatal: Error starting protocol stack: Access is denied.
    - while starting teh second node on the same machine
  	- use --ipcdisable flag

- Explore Ethereum command line option
  - https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options

- Start Mining
  -------------
  - Method 1:
    - $ geth --mine --rpc --networkid <networkd-id> 
        --datadir <path-to-data-directory>
    - mine: 
      - enables mining.
  - Method 2:
    - set an account to receive the mining awards, 
	  called the etherbase account.
	  - > miner.setEtherbase(eth.accounts[0]) 
	  - > miner.start()
	

- Attach Geth Console
  --------------------
  - $ geth --datadir <path-to-data-directory> attach 
      ipc:<path-to-data-directory>/geth.ipc
  - run the console separately and attach it to a mining node
  - console connects to the mining node over ipc
  - ipc (inter-process communications) works on the local computer.
  - In this case geth creates an ipc pipe on local computer’s 
    filesystem and console makes the connection to that node 
	over ipc.
	
	OR
  - $ geth attach http://127.0.0.1:8000  // <rpc_address>:<rpc_port>

- first node will be our admin node

- API Provided by geth 
  --------------------
  - admin,
  - personal  
      - management API provided by geth
  - debug, 
  - miner 
  - txpool
  
- Perform Transaction
  -------------------
  - To transfer funds from an account, we have to use that 
    account’s private key for the signature.
  - To use the private key, we need to unlock it
    - > personal.unlockAccount( "<Account Address>","password")
    - personal 
      - management API provided by geth.
	  
  - Once we unlock the account, we can define three variables 
    in the console, for the sender, receiver and 
	amount to be sent.
  - > var sender = "0x7a69b359e86893efa3d9732e4c65ced51567edd0";
    > var receiver = "0xA9f28458eE1170F285440990c196c1592D3a73f5"
    > var amount = web3.toWei(1, "ether")
	> eth.sendTransaction({from:sender, to:receiver, value: amount})
	
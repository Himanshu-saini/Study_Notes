==============================
Short Circuting of Expression
==============================
- Not evaluation whole expression if the result of expression is determined
  and is not affected by teh remaining expression.
- Saves unnessary calculations

- short-circuited operators include
  --------------------------------
  - logical disjunction operator ("OR")
  - logical conjunction ("AND"), 
  - nullish-coalescing (	… ?? …), 
  - optional chaining,
  - conditional operator.
  - a || (b * c);  // evaluate `a` first, then produce `a` if `a` is "truthy"
  - a && (b < c);  // evaluate `a` first, then produce `a` if `a` is "falsy"
  - a ?? (b || c); // evaluate `a` first, then produce `a` if `a` is not `null` and not `undefined`
  - a?.b.c;        // evaluate `a` first, then produce `undefined` if `a` is `null` or `undefined`

- Ex.
  3 > 2 && 2 > 1  // returns true

  3 > 2 > 1  // Returns false 
  // because 3 > 2 is true, then true is converted to 1 in inequality operators, 
     therefore true > 1 becomes 1 > 1, which is false.

Grouping and Short Circuiting
-----------------------------
- Grouping is listed as having the highest precedence. 
  However, that does not always mean the expression within 
  the grouping symbols ( … ) is evaluated first, 
  especially when it comes to short-circuiting.

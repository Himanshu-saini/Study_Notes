========================
Operators in JavaScript
========================
- Explore:
  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators
  
Arithmetic operator
===================
- + : Addition operator.
- - : Subtraction operator.
- / : Division operator.
- * : Multiplication operator.
- % : Remainder operator.
- ** : Exponentiation operator.
  - 2 ** 5  // equal to 2^5 i.e, 32

- the unique exponentiation operator has right-associativity, 
  whereas other arithmetic operators have left-associativity.
  - 6 / 3 / 2 is the same as (6 / 3) / 2 because 
    division is left-associative.
  - Exponentiation, on the other hand, is right-associative, 
    so 2 ** 3 ** 2 is the same as 2 ** (3 ** 2)

Unary operators
==================
- delete
  - The delete operator deletes a property from an object.
- void
  - The void operator discards an expression's return value.
- typeof
  - The typeof operator determines the type of a given object.
  - var a = 20;
    typeof a; // gives "number" as result
- Urinary plus (+)
  - The unary plus operator converts its operand to Number type.
  - var y = -1;
    console.log(+y);  // expected output: -1
    console.log(+''); // expected output: 0
	console.log(+true); // expected output: 1
	console.log(+false); // expected output: 0
    console.log(+'hello'); // expected output: NaN
- Urinary negation (-)
  - The unary negation operator converts its operand to Number type and then negates it.
  - const a = '4';
    console.log(-a); // expected output: -4
- Bitwise NOT operator (~)
  -  inverts the bits of its operand.
- Logical NOT operator (!)
  - takes truth to falsity and vice versa
  - When used with non-Boolean values, it returns false 
    if its single operand can be converted to true; 
	otherwise, returns true.
  - n4 = !'Cat'  // !t returns false
- Double NOT (!!)
  -  explicitly force the conversion of any value to the corresponding boolean primitive

Relational operators
====================
- in
  - The in operator determines whether an object has a given property.
  - const car = { make: 'Honda', model: 'Accord', year: 1998 };
    console.log('make' in car); // expected output: true
  - let trees = ['redwood', 'bay', 'cedar', 'oak', 'maple']
    3 in trees        // returns true (index of array)
    6 in trees        // returns false (out of index)
    'bay' in trees    // returns false (you must specify the index number, not the value at that index)
    'length' in trees // returns true (length is an Array property)

- instanceof
  - The instanceof operator determines whether an object is an instance of another object.
  - let simpleStr = 'This is a simple string'
    let myString  = new String()
    
    simpleStr instanceof String  // returns false, string literal is not an object
    myString  instanceof String  // returns true
    myString  instanceof Object  // returns true


Optional Chaining operator (?.)
================================
- permits reading the value of a property located deep 
  within a chain of connected objects without having to expressly validate 
  that each reference in the chain is valid. 
- instead of causing an error if a reference is nullish (null or undefined),
  the expression short-circuits with a return value of "undefined".
- Syntax
  - obj.val?.prop
  - obj.val?.[expr]
  - obj.arr?.[index]
  - obj.func?.(args)
- By using the ?. operator instead of just ., JavaScript knows to implicitly check 
  to be sure obj.first is not null or undefined before attempting to access obj.first.second. 
  If obj.first is null or undefined, the expression automatically short-circuits, 
  returning undefined.

Binary logical operators
=========================
- Logical AND (&&)
  -----------------
  - logical conjunction 
  
- logical OR (||) operator  
  ------------------------
  - logical disjunction
  - Syntax
    expr1 || expr2
  - If expr1 can be converted to true, returns expr1; 
    else, returns expr2.
  - False Values:
    - null, NaN, 0, empty string ("" or '' or ``), undefined.

- Nullish coalescing operator (??)
  ----------------------------------
  - logical operator that returns its right-hand side operand 
    when its left-hand side operand is null or undefined, 
    and otherwise returns its left-hand side operand. 
  - Ex.
    const valA = nullValue ?? "default for A";
  
  - It is not possible to combine both the AND (&&) and OR operators (||) 
    directly with ??. A SyntaxError will be thrown in such cases.
    - Ex.
      null || undefined ?? "foo"; // raises a SyntaxError
      true || undefined ?? "foo"; // raises a SyntaxError
  - However, providing parenthesis to explicitly indicate precedence is correct:
    - (null || undefined) ?? "foo"; // returns "foo"

  - console.log(foo.someBarProp?.toUpperCase() ?? "not available"); // "not available"

Conditional (ternary) operator
==============================
- (condition ? ifTrue : ifFalse)
  The conditional operator returns one of two values based on the logical value of the condition.

Assignment operators
=====================
- = : Assignment operator.
- *= : Multiplication assignment.
- ??= : Logical nullish assignment.
- [a, b] = [1, 2]
  {a, b} = {a:1, b:2}
  - Destructuring assignment 
  - allows you to assign the properties of an array or object 
    to variables using syntax that looks similar to array or object literals.

Comma operator (,)
===============
- The comma operator allows multiple expressions to be evaluated 
  in a single statement and returns the result of the last expression.

Other Basic Operators 
=====================
- new Operator 
  ------------
  - The new operator creates an instance of a constructor.

- new.target
  ----------
  - In constructors, new.target refers to the constructor that was invoked by new.

- Grouping operator ( )
  ---------------------
  - Groups expressions 

- Chaining Operator (.)
  -----------------------
  - used to refer the deep value within an object
  - Ex.
    obj.first; 
    obj.first.next;  
  - causes an error if a reference is nullish (null or undefined),


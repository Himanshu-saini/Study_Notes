===========================
Functions of String Class
===========================

Input Functions
==================
- using CIN operator
  -------------------
  - consider space (whitespace, tabs,etc.) as terminating character.
  - takes only single word as input.
- getline()
  ---------
  - used to store a stream of characters as entered by the user 
    in the object memory.
  - consider new line character '\n' as terminating character.
    - can take multiple words sentence as input.
  - Ex. 
    getline(cin,str);
- push_back()
  -----------
  - input a character at the end of the string.
  - Ex.
    str.push_back('A');  // appends 'A' at the end of str.
- pop_back()
  ---------
  - delete the last character from the string.
- append() 
  -------- 
  - str.append(" extension")
    - add the argument string at the end
  - str.append(str2, 2, 6) 
    - appends part of other string 
	- 6 characters from 2nd position of str2
- insert() 
  --------
  - str.insert(pos_to_begin,string_to_insert)
  - inserts the given substring in the string

Iterator Functions
====================
- iterator 
  ----------
  - object (like pointer) that points to am element
    inside the container.
  - use to move through the container.
  - Need not to know the size of the container.
  - provides ability to dynamically add or remove 
    elements form container as and when we want with ease.

- begin()
  - returns an iterator to beginning of the string.
- end() 
  - returns an iterator to end of the string.
  - position after the last character
- rbegin() 
  - returns a reverse iterator pointing at the end of string.
- rend() 
  - returns a reverse iterator pointing at beginning of string.

- Ex.
  std::string::reverse_iterator it1;
  for (it1=str.rbegin(); it1!=str.rend(); it1++) 
    cout << *it1; 
  - Gives reverse of the string.
  
Capacity Functions
===================
- capacity()
  - returns the capacity allocated to the string
  - equal to or more than the size of the string.
  - Additional space is allocated for the 
    new characters that will be added to the string
- resize() 
  -changes the size of string (increase or decrease).
- length() or size() 
  - finds the length of the string
- shrink_to_fit()
  - decreases the capacity of the string and makes it equal to its size.
  - useful to save additional memory

Manipulating Functions
========================
- copy(“char array”, len, pos)
  - copies the substring in target character array
  - target char array, length to be copied and 
    starting position in string to start copying.
- replace() : str.replace(a, b, "test")
  - replaces b characters from a index by str 
- swap()
  - swaps one string with other  
- substr() : str.substr(a,b)
  - returns a substring of b length starting from index a
  - if b is not passed, returns substring till end.
- erase() : 
  - str.erase(a,b)
    - deletes b characters at index a
	- if b is not passed, deletes all character after position a.
	- if a,b not passed, deletes all characters.
  - str.erase(str.begin() + 5, str.end() - 3)
    - iterator version of erase 
	- deletes single character if second arg is not passed.
  
Searching functions 
====================
- find() : str.find("asdf") 
  - returns index where pattern is found
  - of not found it returns predefined constant string::npos 
    whose value is -1
- rfind() : str.rfind(“string”)
  - returns the position of last occurrence of the substring 
    specified
- find_first_of() : str.find_first_of("asdf")
  - returns the position of first character that matches 
    any of the characters in argument. 
- find_last_of() : str.find_last_of("asdf")
  - returns the position of last character that matches 
    any of the characters in argument. 
- compare() : str.compare(str2)
  - compare two strings
  - returns the difference of second string and first string 
    in integer.  
  - return 0 if equal.

Other functions 
===================
- clear() : str.clear()
  - deletes all character from string 
- empty(): str.empty()
  - Tests whether the string is empty.
- at() : str.at(3)
  - str6.at(2); //  Same as "ch = str6[2];"
- front() : str.front()
  - returns first character
- back() : str.back()
  - returns last character in string 

=============
2D Arrays 
=============
- Syntax:
  <data type> <var name>[<row size>][<column size>]

- Ex.
  int a[10][10]  // Declaration 
  int b[2][3] = { {1,2,3}, {3,5,6} }  // Initialization
  cout<< b[1][2]  // Accesing element 
  
- While initializing 2D array either both dimention should be given 
  or the column size should be giveb
  Ex. 
  int a[10][5];
  int a[][3] = { {1,2,3}, {4,5,6} };
  
- 2D array is represented by double pointer.
  - Ex.
    int a[5][5];
	**a // equalent to a[0][0]
	*(*a+1)  // equilent to a[1][0]
	*(*a+1)+2 // equilent to a[1][2]

IF YOU ARE PASSING A TWO-DIMENSIONAL ARRAY TO A FUNCTION:

INT ARRAY[NROWS][NCOLUMNS];
F(ARRAY);
THE FUNCTION'S DECLARATION MUST MATCH:
VOID F(INT A[][NCOLUMNS])
{ ... }
OR
VOID F(INT (*AP)[NCOLUMNS]) /* AP IS A POINTER TO AN ARRAY */
{ ... }

IN THE FIRST DECLARATION, THE COMPILER PERFORMS THE USUAL IMPLICIT PARAMETER REWRITING OF ARRAY OF ARRAY'' TO POINTER TO ARRAY'' (SEE QUESTIONS 6.3 AND 6.4); IN THE SECOND FORM THE POINTER DECLARATION IS EXPLICIT. SINCE THE CALLED FUNCTION DOES NOT ALLOCATE SPACE FOR THE ARRAY, IT DOES NOT NEED TO KNOW THE OVERALL SIZE, SO THE NUMBER OF ROWS, NROWS, CAN BE OMITTED. THE WIDTH OF THE ARRAY IS STILL IMPORTANT, SO THE COLUMN DIMENSION NCOLUMNS (AND, FOR THREE- OR MORE DIMENSIONAL ARRAYS, THE INTERVENING ONES) MUST BE RETAINED.

int (*ptr)[10];
ptr is a pointer to an array of 10 integers
========================
Multi Dimentional Array 
========================
- Array can have multiple dimentions according to our needs
- Numbre of dimentions is set during the array declaration 
  by ading new [<size] 

- Syntax 
  <Data type> <var>[<size1>][<size2>][<size3>]...
  
- Ex.
  int a[2][3][5]  // 3D Array 

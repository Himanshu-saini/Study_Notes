===================
Development server
====================
- By default, the development server doesn’t serve any static files for your site
  (such as CSS files, images, things under MEDIA_URL and so forth).
  django.contrib.staticfiles to help you manage them.

- django.contrib.staticfiles is included in your INSTALLED_APPS
- define STATIC_URL, for example:
  STATIC_URL = '/static/'

- use the static template tag
- Store your static files in a folder called static in your app
- In addition to using a "static/" directory inside your apps, 
  you can define a list of directories (STATICFILES_DIRS) in your settings file 
  where Django will also look for static files

Deployment
==========
- Set the STATIC_ROOT setting to the directory from which you’d like to serve these files,
- Run the collectstatic management command:
  $ python manage.py collectstatic
- It copy all files from your static folders into the STATIC_ROOT 


For Production Server
======================
- basic outline of putting static files into production is simple: 
  run the collectstatic command when static files change, 

- arrange for the collected static files directory (STATIC_ROOT) 
  to be moved to the static file server and served. 
- Depending on STATICFILES_STORAGE, 
  files may need to be moved to a new location manually 
  or the post_process method of the Storage class might take care of that.

Serving the site and your static files from the same server
-------------------------------------------------------------
- Push your code up to the deployment server.
- On the server, run collectstatic to copy all the static files into STATIC_ROOT.
- Configure your web server to serve the files in STATIC_ROOT under the URL STATIC_URL

- You’ll probably want to automate this process, especially if you’ve got multiple web servers
  Use Fabric - One of the basic use of fabric is to run SSH commands on a remote server


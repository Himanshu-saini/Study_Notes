LOGGING
=============
- Django uses Python’s builtin logging module to perform system logging.
- Python logging configuration consists of four parts:
  - Loggers
  - Handlers
  - Filters
  - Formatters
  
  
Loggers
=========
- A logger is the entry point into the logging system. 
- Each logger is a named bucket to which messages can be written for processing.
- A logger is configured to have a log level.
- A log record can also contain useful metadata that describes the event that is being logged. 
- This can include details such as a stack trace or an error code.
- Once a logger has determined that a message needs to be processed, it is passed to a Handler.

Log Level
--------------
- log level describes the severity of the messages that the logger will handle.
- Python defines the following log levels:
  - DEBUG: Low level system information for debugging purposes
  - INFO: General system information
  - WARNING: Information describing a minor problem that has occurred.
  - ERROR: Information describing a major problem that has occurred.
  - CRITICAL: Information describing a critical problem that has occurred.

Handlers
==========
- The handler is the engine that determines what happens to each message in a logger. 
- It describes a particular logging behavior, such as writing a message 
  to the screen, to a file, or to a network socket.
- handlers also have a log level. 
- If the log level of a log record doesn’t meet or exceed the level of the handler, the handler will ignore the message.

Filters
===============
- A filter is used to provide additional control over which log records are passed from logger to handler.
- By installing a filter, you can place additional criteria on the logging process. 
- For example: 
  you could install a filter that only allows ERROR messages from a particular source to be emitted.
- Filters can also be used to modify the logging record prior to being emitted. 
- Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions.

Formatters
==============
- Formatters describe the exact format of that text. 
- A formatter usually consists of a Python formatting string containing LogRecord attributes
- however, you can also write custom formatters to implement specific formatting behavior.

====================================================
Configuring logging
===================================================
- By default, Django uses the dictConfig format to configure logging.
- you use LOGGING to define a dictionary of logging settings
- These settings describes the loggers, handlers, filters and formatters 
  that you want in your logging setup, and the log levels and other properties that you want those components to have.
- If the disable_existing_loggers key in the LOGGING dictConfig is set to True
  then all loggers from the default configuration will be disabled.
- you can set disable_existing_loggers to False and redefine some or all of the default loggers; 
  or you can set LOGGING_CONFIG to None and handle logging config yourself.

Examples
-----------
- here’s a small configuration that will allow you to output all log messages to the console:
- settings.py
	import os

	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'handlers': {
			'console': {
				'class': 'logging.StreamHandler',
			},
		},
		'root': {
			'handlers': ['console'],
			'level': 'WARNING',
		},
		'loggers': {
			'django': {
				'handlers': ['console'],
				'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
				'propagate': False,
			},
		},
	}
- By default, this config sends messages from the django logger of level INFO or higher to the console. 
  This is the same level as Django’s default logging config, except that the default config only displays log records when DEBUG=True.
- you can also set the environment variable DJANGO_LOG_LEVEL=DEBUG 
  to see all of Django’s debug logging which is very verbose as it includes all database queries.

- configuration which writes all logging from the django named logger to a local file:
	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'handlers': {
			'file': {
				'level': 'DEBUG',
				'class': 'logging.FileHandler',
				'filename': '/path/to/django/debug.log',
			},
		},
		'loggers': {
			'django': {
				'handlers': ['file'],
				'level': 'DEBUG',
				'propagate': True,
			},
		},
	}

- fairly complex logging setup:

	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'formatters': {
			'verbose': {
				'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
				'style': '{',
			},
			'simple': {
				'format': '{levelname} {message}',
				'style': '{',
			},
		},
		'filters': {
			'special': {
				'()': 'project.logging.SpecialFilter',
				'foo': 'bar',
			},
			'require_debug_true': {
				'()': 'django.utils.log.RequireDebugTrue',
			},
		},
		'handlers': {
			'console': {
				'level': 'INFO',
				'filters': ['require_debug_true'],
				'class': 'logging.StreamHandler',
				'formatter': 'simple'
			},
			'mail_admins': {
				'level': 'ERROR',
				'class': 'django.utils.log.AdminEmailHandler',
				'filters': ['special']
			}
		},
		'loggers': {
			'django': {
				'handlers': ['console'],
				'propagate': True,
			},
			'django.request': {
				'handlers': ['mail_admins'],
				'level': 'ERROR',
				'propagate': False,
			},
			'myproject.custom': {
				'handlers': ['console', 'mail_admins'],
				'level': 'INFO',
				'filters': ['special']
			}
		}
	}

================================
Django’s logging extensions
================================

Loggers
-------------
- Django provides several built-in loggers.
- django : catch-all logger for messages in the django hierarchy.
- django.request
- django.server
- django.template
- django.db.backends
- django.security.*
  - django.security.DisallowedHost
  - django.security.csrf
- django.db.backends.schema

Handlers
--------------
- Django provides one log handler in addition to those provided by the Python logging module.
- django.utils.log.AdminEmailHandler
- Example:
'handlers': {
    'mail_admins': {
        'level': 'ERROR',
        'class': 'django.utils.log.AdminEmailHandler',
        'include_html': True,
    }
},

Filters
------------
- Django provides some log filters in addition to those provided by the Python logging module.
- django.utils.log.CallbackFilter
- django.utils.log.RequireDebugFalse
- django.utils.log.RequireDebugTrue




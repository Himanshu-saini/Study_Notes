Commands:
=================
$ docker run <image name>  // install a run from a host else docker hub
$docker run <name>:<version>   // provide tag  , to install specific version of the image
$ docker pull <image name>  // only download the image do not run it
$ docker build --tag bulletinboard:1.0 	//build docker image with version
$ docker tag bulletinboard:1.0 himanshu17/bulletinboard:1.0	//to rename the tag name/ image name

$ docker ps  //list all running containers
$ docker ps –a  // all running or exited conatiners
$ docker images // list all available image on the host
$docker network ls  // to list networks 

$ docker stop <container name>   // stop the running container
$ docker rm --force <name>  // to remove running/exited container permanently but the image still remain
$ docker rmi <image name>  // remove image from host  ** all the container running from that image must be removed before

$ docker system prune -a	// delete all doccker data (images and cache)
$ docker builder prune 		// delete docker cache image

$docker inspect <container name> // return detailed information about the container in JSON format
$docker logs <container name>		//to view the logs of the container

$ docker run –p 80:5000 simple-webserver  // or --port to map port 5000 of docker container to port 80 of the machine.

- To list the expose ports in container:
  $ docker ports <container name>
  
- To open command bash in container:
  $ docker exec -it <container name> bash

Run – attach and detach:
==========================
$ docker run <name>  // run the process in attach mode i.e., process run in foreground and command only shows the output of the process. Exit the process with ctrl+c
$ docker run –d <name>  //or use --detach to run process in detach mode in background
$ docker attach <process id or name>  // To attach again to the foreground process:
** if we use process id of a container, only few first character of the id can be given so the it can differentiate with other processes.

Taking Input from terminal by docker container:
===================================================
** By default docker does take input from the terminal. It just executes the process without any input.
If your program require an input from the stdin, launch the program in interactive mode :
$ docker run –i <name> 
if we want to also prompt message to the terminal add “-t” option to the command
$ docker run –it <name>   // display message and take input from the terminal

Using Environment variable:
====================================
To change a value of a variable in a program without changing the code use environment variable.
Ex. Color = os.environ.get(‘APP_COLOR’) // it gets the value of the APP_COLOR from the environment
To run in terminal use : export APP_COLOR=blue; python app.py
Passing a value of a environment variable to the docker container :
$ docker run –e APP_COLOR=red simple-webapp
Docker inspect will show the list of environment variables running on the container under Config > Env


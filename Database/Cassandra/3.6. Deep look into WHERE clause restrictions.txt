Difference Between Each Keys:
====================================
- The partition key columns are the first part of primary key 
  and their role is to spread data evenly around the cluster. 
- Rows will be spread around the cluster based on the hash of the partition keys. 
- The clustering key columns are used to cluster the data of a partition, allowing a very efficient retrival of rows. 
- Due to the differences in the role that they are playing, 
  partition key, clustering and normal columns support different sets of restrictions within the WHERE clause. 
- Futhermore, those sets of restrictions differ depending of the type of query: SELECT, UPDATE or DELETE.

SELECT statements
====================
Partition Keys Restrictions
===========================
- partition key columns support only two operators: = and IN
- Example table:
  CREATE TABLE numberOfRequests 
  ( cluster text, date text, time text, numberOfRequests int, 
  PRIMARY KEY ((cluster, date), time) )

IN restriction
---------------
- valid since 2.2 release
- WHERE cluster IN ('cluster1', 'cluster2')

Unrestricted partition key columns
-----------------------------------
- Cassandra will require that you either 
  restrict all the partition key columns, or none of them
- reason why is that Cassandra needs all the partition key columns 
  to be able to compute the hash that will allow it 
  to locate the nodes containing the partition. 
- if some are specified on the clustering keys, 
  Cassandra will require ALLOW FILTERING to be added to the query.

>, >=, <= and < operators
--------------------------
- Cassandra does not support >, >=, <= and < operator directly on the partition key.
- allows you to use them through the use of the token function.
- SELECT * FROM numberOfRequests 
  WHERE token(cluster, date) > token('cluster1', '2015-06-03') 
  AND token(cluster, date) <= token('cluster1', '2015-06-05') 
  AND time = '12:00';

Clustering Column Restrictions
==============================
- support the =, IN, >, >=, <=, <, CONTAINS and CONTAINS KEY operators in single-column restrictions 
  and the =, IN, >, >=, <= and < operators in multi-column restrictions.

Unrestricted clustering columns
--------------------------------
- Sample Table:
  CREATE TABLE numberOfRequests 
  ( cluster text, date text, datacenter text, hour int, minute int, numberOfRequests int, 
  PRIMARY KEY ((cluster, date), datacenter, hour, minute))

- data will be stored per partition as
  {datacenter: US_WEST_COAST 
    {hour: 0 
      {minute: 0 {numberOfRequests: 130}} 
      {minute: 1 {numberOfRequests: 125}} 
      … 
      {minute: 59 {numberOfRequests: 97}}
    } 
  {hour: 1 {minute: 0 …

- SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND hour = 14 AND minute = 0;
  // datacenter (clustering key) missing
  Cassandra will reject the query as it has to scan the entire partition 
  to find the requested data, which is inefficient.

multi-column IN restrictions
------------------------------
- SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND (datacentre, hour) IN (('US_WEST_COAST', 14), (‘US_EAST_COAST’, 17)) 
  AND minute = 0; 
  
>, >=, <= and < restrictions
-----------------------------------
- Single column slice restrictions are allowed 
  only on the last clustering column being restricted.
  
- Valid Example :
- SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND datacenter = 'US_WEST_COAST' AND hour= 12 
  AND minute >= 0 AND minute <= 30; 
- SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND datacenter = 'US_WEST_COAST' AND hour >= 12; 
- SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND datacenter > 'US';
  
- Invalid:
  SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND datacenter = 'US_WEST_COAST' AND hour >= 12 
  AND minute = 0;
  
- Multi-column slice restrictions are allowed 
  on the last set of clustering columns being restricted.
  SELECT * FROM numberOfRequests 
  WHERE cluster = ‘cluster1’ AND date = ‘2015-06-05’ 
  AND datacenter = 'US_WESTCOAST' 
  AND (hour, minute) >= (12, 0) AND 
  (hour, minute) <= (14, 0)
  
CONTAINS and CONTAINS KEY restrictions
---------------------------------------
- can only be used on collections 
  when the query is using a secondary index.

Regular Column Restrictions
=============================
- Regular columns can be restricted by 
  =, >, >=, <= and <, CONTAINS or CONTAINS KEY restrictions 
  if the query is a secondary index query. 
- IN restrictions are not supported.
  
Secondary Indices Queries
===========================
- Direct queries on secondary indices 
  support only =, CONTAINS or CONTAINS KEY restrictions. 
- CONTAINS restriction can only be used on collection types.
- CONTAINS KEY restriction can only be used on map for which the keys have been indexed.

- Sample Table:
  CREATE TABLE contacts ( id int PRIMARY KEY, 
  firstName text, lastName text, phones map, emails set ); 
  CREATE INDEX ON contacts (firstName); 
  CREATE INDEX ON contacts (keys(phones)); // Using the keys function to index the map keys 
  CREATE INDEX ON contacts (emails);
  
- valid:
  SELECT * FROM contacts WHERE firstname = 'Benjamin'; 
  SELECT * FROM contacts WHERE phones CONTAINS KEY 'office'; 
  SELECT * FROM contacts WHERE emails CONTAINS 'Benjamin@oops.com';

Secondary indices filtering:
==============================
- Secondary index queries allow you to restrict the returned results 
  using the =, >, >=, <= and <, CONTAINS and CONTAINS KEY restrictions 
  on non-indexed columns using filtering.  
- You should nevertheless be carefull with filtering. 
  It can be an expensive operation.
  
- Valid:
- SELECT * FROM contacts 
  WHERE firstname = 'Benjamin' AND lastname = 'Lerer' 
  ALLOW FILTERING; 
- SELECT * FROM contacts 
  WHERE phones CONTAINS KEY 'office' 
  AND phones CONTAINS '0000.0000.0000' 
  ALLOW FILTERING;
  
 UPDATE and DELETE statements
==============================
- the single-column = on any partition key or clustering columns
- the single-column IN restriction on the last partition key column

- adding support in 3.0
- IN restrictions on any partition key column
- IN restictions on any clustering column
- EQ and IN multi-column restrictions on the clustering keys (mixed or not with single-column restrictions).
- DELETE statements support for range deletion of entire rows.

- Secondary index lookup for UPDATE and DELETE statements is not and will not be supported   
  
  
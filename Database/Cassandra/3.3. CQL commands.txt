Create keyspace
================
- $ CREATE KEYSPACE <Keyspace name>
  WITH replication = <replication strategy>;

Like
- $ CREATE KEYSPACE minorDB
  WITH replication = { 'class' : 'SimpleStrategy', 
  'replication_factor' : 3 };	
  - for single Data Center
  - replication factor defines number of replica in the cluster  
OR
- $ CREATE KEYSPACE minorDB WITH 
  replication = { 'class' : 'NetworkTopologyStrategy', 'dc1':3, 'dc2':2 };
  - For setting multiple datacenters and communicating Througn network
  - '<datacenter name>' : <replication factor>

Use keyspace:
--------------
- $ USE minorDB;

List All Keyspaces:
-------------------
- $ DESCRIBE KEYSPACES;

Alter keyspace:
------------------
- cql> alter keyspace minordb with 
	replication = { 'class' : 'NetworkTopologyStrategy',
			'datacenter1':1};
- cql> quit
- cmd$ nodetool repair -full

Compound key:
=============
- It is used for filtering, sorting, searching,.. 
- It includes Partition key ( determine on which node data is stored)
  and one or more additional columns that determines clustering.
- Partition key will be first field you defined.
- Need to know which fields you want to be able to sort and order by.
- Syntax:
  PRIMARY KEY (col1,col2,....)

Best Practices For partition keys
---------------------------------
- Avoid unbounded partitions
- Avoid too large partitions
- Choose your partition key in a way that distributes the data correctly, avoiding cluster hotspots

UUID: Universally Unique ID
----------------------------- 
- Used ot avoid collisions in column names
- 32 hex digits
- TIMEUUIDS: time in 100ns intrvals
- to insert TIMEUUID use : now(),dateOf() and minTimeuuid()/maaxTimeuuid()
- minTimeuuid(<date>) convert a date to uuid
- dateOf(<timeuuid>) convert timeuuid to date and time 

Create Table:
==============
- $CREATE TABLE IF NOT EXISTS 
  monorDB.user_health_profile(User_Name text,DOB date,
  Sex varchar,Age int,Height float,Weight float,Disease varchar, 
  PRIMARY KEY(User_Name,Disease,Age));

LIst tables in keyspaces:
-------------------------
- $ select * from system_schema.tables 
    where keyspace_name = 'minordb';
- $ select * from system_schema.views 
    where keyspace_name = 'minordb';

Selecting Data:
=================
- select * from <table name>;
- select COUNT(*) from <table>;
- select * from <table> limit 10;  // limit the number of rows fetched
- select * from <table> where <col1>='value' // col1 must be defined as PRIMARY KEY

Creating Index
---------------
- We cannot use column which are not primary key for searcching
- If we want to use a column that is not a primary key for searching we need to create index of it.
- $ CREATE INDEX OF <table>(<column>); 

Selecting Data from containers:
-------------------------------
- Use CONTAINS to seach for data fron list,set or map type column
- SELECT * FROM videos WHERE tags CONTAINS 'action';

Inserting Data:
================
- INSERT INTO <tabel> (<columns>) 
  VALUES (<value list>)
- insert into user (id,name) 
  values (now(),"himanshu") // now() used to create UUID 
- insert into user (id,emails) 
  values (now(),{'him@gmail.com','saini@gmail.com'}) 
  // {} is used to insert collection of data 

** If column already exists, it is updated
** Quantify table name using keyspace like <keyspace>.<table>

Update Data:
==============
- UPDATE <tabel> SET <col>=<value> WHERE <condition>
- update users 
  set todo = 
  { 'task1':'create collection',
  'task2':'deploy project'}
  where name='Himanshu';
  // updating collection 
 
Deleting Data 
==============
- DELETE <column name> FROM <tabel> WHERE <condition>
- Delete email,address from user where name="himanshu"
- Delete todo['task1'] from user where name="Himanshu"  // delete data in collection 

Describe command: used to get the information about Keyspace/Table/Views :
=========================
- $ describe keyspaces;			//list all keyspaces
- $ describe keyspace <name>;	// show info ablout that keyspace
- $ describe tables;			//list all tables in the keyspace
- $ describe tabel <name> 		// shor info about that table

Alter table : To change the table schema 
=============
- ALTER TABLE <table> ALTER/ADD/DROP <col>
- alter tabel user alter age type int; 
- alter table user add phone varchar;
- alter tabel user drop address;

DROP Table/Keyspace/Materialized View:
======================================
- $DROP TABLE IF EXISTS user_health_profile;
- $DROP KEYSPACE  IF EXISTS minorDB;
- $DROP MATERIALIZED VIEW IF EXISTS hospital_users;

Create Materialized View:
=========================
$CREATE MATERIALIZED VIEW hospital_users AS 
  SELECT (User_Name,MaritalStatusID,GenderID,Zip,DOB,Sex,MaritalDesc,Age,Height,Weight,BMI,user_type1,user_type2) 
  FROM minorDB.user_profile 
  WHERE user_type2=1 
  AND User_Name IS NOT NULL AND DOB IS NOT NULL AND zip IS NOT NULL AND user_type1 IS NOT NULL AND user_type2 IS NOT NULL 
  PRIMARY KEY (User_Name,DOB,zip,user_type1,user_type2);

List All Materialized View 
---------------------------
- $ select * from system_schema.views;
- $ select * from system_schema.views 
  where keyspace_name = 'minordb';  // from particular keyspace


Copy From CSV file:
====================
- $ COPY minorDB.user_health_profile (User_Name ,DOB ,Sex ,Age ,Height ,Weight ,BMI ,Disease ) 
  FROM '../database/user_health_profile.csv' 
  WITH HEADER = TRUE ;

Using Batch statement: used to apply multple statements at the same time
=======================
- $ BEGIN BATCH
  .. INSERT INTO ......... <query 1>	// no semi colon here
  .. <query 2>
  .. <query 3>
  .. <query 4>
  .. APPLY BATCH;
  // As the queries are executed at teh same time, now() will give same uuid for all query 

	
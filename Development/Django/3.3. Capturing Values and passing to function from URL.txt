======================== 
Capture value for URL
========================

- To capture a value from the URL, use angle brackets
  which sends it as a keyword argument to the view function. 
- Captured values can optionally include a converter type. 

- Exaple: <int:question_id>
  The ":question_id>" part of the string defines 
  the name that will be used to identify the matched pattern, 
  and the "<int:" part is a converter that determines 
  what patterns should match this part of the URL path.
- If a converter isn’t included, any string, excluding a / character, is matched.

Path converters
---------------
- str :default
- int 
- slug 
- uuid 
- path - Matches any non-empty string, including the path separator, '/'

Using regular expressions
==========================
- If the paths and converters syntax isn’t sufficient for defining your URL patterns, 
  you can also use regular expressions. 
- To do so, use re_path() instead of path().
- Syntax for named regular expression groups is (?P<name>pattern), 
  where name is the name of the group and pattern is some pattern to match.

- Example:
  from django.urls import path, re_path
  from . import views

  urlpatterns = [
    path('articles/2003/', views.special_case_2003),
    re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive),
    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive),
    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\w-]+)/$', views.article_detail),
 ]

- Each captured argument is sent to the view as a string, 
  regardless of what sort of match the regular expression makes.

Nested arguments
-----------------
- re_path(r'^comments/(?:page-(?P<page_number>\d+)/)?$', comments)
  The outer argument in this case is a non-capturing argument (?:...)

Using custom path converters
====================================
- A converter is a class that includes the following:
  - A regex class attribute, as a string.
  - A to_python(self, value) method, 
    which handles converting the matched string into the type 
	that should be passed to the view function. 
	It should raise ValueError if it can’t convert the given value. 
  - A to_url(self, value) method, 
    which handles converting the Python type into a string to be used in the URL.

- For example:
  class FourDigitYearConverter:
    regex = '[0-9]{4}'
    def to_python(self, value):
        return int(value)
    def to_url(self, value):
        return '%04d' % value

Register custom converter classes in your URLconf using register_converter():
-------------------------------------------------------------------------------
  from django.urls import path, register_converter
  from . import converters, views

  register_converter(converters.FourDigitYearConverter, 'yyyy')

  urlpatterns = [
    path('articles/2003/', views.special_case_2003),
    path('articles/<yyyy:year>/', views.year_archive),
    ...
  ]

=========================================
Passing extra options to view functions
=========================================
- The path() function can take an optional third argument 
  which should be a dictionary of extra keyword arguments to pass to the view
- For example:
  from django.urls import path
  from . import views

  urlpatterns = [
    path('blog/<int:year>/', views.year_archive, {'foo': 'bar'}),
  ]

Passing extra options to include()
----------------------------------
- Similarly, you can pass extra options to include() 
  and each line in the included URLconf will be passed the extra options. 
  # main.py
  from django.urls import include, path
  urlpatterns = [
    path('blog/', include('inner'), {'blog_id': 3}),
  ]

======================
Using SASS ini Djnago
======================
- Extra library is included to use sass/scss in django
- There are many libraries to do this

django-sass
============
- The absolute simplest way to use Sass with Django. 
- Pure Python, minimal dependencies, and no special configuration required.
- Install:
  $ pip install django-sass
- Add "django-sass" to your INSTALLED_APPS ( only need to do this in a dev environment )

management command
------------------
- compile app2.scss and put it in the css directory
  $ python manage.py sass app2/static/app2/scss/app2.scss app2/static/app2/css/app2.css -g
  the -g will build a source map, which is helpful for debugging CSS
- compile the entire scss directory into a corresponding css directory
  $ python manage.py sass app2/static/app2/scss/ app2/static/app2/css/

- To compile minified CSS, use the -t flag to specify compression level 
  levels: "expanded", "nested", "compact", "compressed". 
  The default is "expanded" which is human-readable.  

Watch Mode:
-----------
- To have django-sass watch files and recompile them as they change
  $ python manage.py sass app2/static/app2/scss/ app2/static/app2/css/ --watch

Limitations
------------
- you can not traverse upwards using ../ in @import statements.
- Only files ending in .scss are supported for now

django-sass-processor
=======================
- Refer SASS/SCSS files directly from your sources, instead of referring a compiled CSS file

Install
---------
- $ pip install libsass django-compressor django-sass-processor
- django-compressor is required only for offline compilation, when using the command manage.py compilescss
- libsass is not required on the production environment,if SASS/SCSS files have been precompiled and deployed using offline compilation.

Configuration
--------------
- Add "sass_processor" in INSTALLED_APPS 
- directory referred by SASS_PROCESSOR_ROOT (or, if unset STATIC_ROOT)
- Add "sass_processor.finders.CssFinder" to STATICFILES_FINDERS
- list of additional search paths
  SASS_PROCESSOR_INCLUDE_DIRS = [
    os.path.join(PROJECT_PATH, 'extra-styles/scss'),
    os.path.join(PROJECT_PATH, 'node_modules'),
  ]
- SASS_OUTPUT_STYLE sets coding style of the compiled result, 
  one of compact, compressed, expanded, or nested. 
  Default is nested for DEBUG and compressed in production.
  SASS_OUTPUT_STYLE = 'compact'

Usage
-----
{% load sass_tags %}
<link href="{% sass_src 'myapp/css/mystyle.scss' %}" rel="stylesheet" type="text/css" />

code will be rendered as HTML like:
<link href="/static/myapp/css/mystyle.css" rel="stylesheet" type="text/css" />

Offline compilation
--------------------
- precompile all occurrences of your SASS/SCSS files 
  $ ./manage.py compilescss
- compiled *.css files are stored side-by-side with their corresponding SASS/SCSS files. 
- To collect all css files, run:
  $ ./manage.py collectstatic
-  don't want to expose the SASS/SCSS files in a production environment
  $ ./manage.py collectstatic --ignore=*.scss
=======
NGINX
========
- Nginx makes for a great frontend server due to its speed, stability and low resource footprint.

Nginx configuration for a site:
================================
# Gunicorn server
upstream django {
  server  domain.com:9000;
}

# Redirect all requests on the www subdomain to the root domain
server {
  listen 80;
  server_name www.domain.com;
  rewrite ^/(.*) http://domain.com/$1 permanent;
}

# Serve static files and redirect any other request to Gunicorn
server {
  listen       80;
  server_name  domain.com;
  root        /var/www/domain.com/;
  access_log  /var/log/nginx/domain.com.access.log;
  error_log  /var/log/nginx/domain.com.error.log;
  
  # Check if a file exists at /var/www/domain/ for the incoming request.
  # If it doesn't proxy to Gunicorn/Django.
  try_files $uri @django;
  
  # Setup named location for Django requests and handle proxy details
  location @django {
    proxy_pass         http://django;
    proxy_redirect     off;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
  }
}

What Does it Do?
-----------------
- The first block tells Nginx where to find the server hosting our Django site. 
- The second block redirects any request coming in on www.domain.com to domain.com 
  so each resource has only one canonical URL. 
- The final section is the one that does all the work. 
  It tells Nginx to check if a file matching the request exists in /var/www/domain.com. 
  If it does, it serves that file
  if it doesn’t, it proxies the request to the Django site.

SSL
=====
- Another benefit to running a frontend server is SSL termination. 
- Rather than having two Django instances running for SSL and non-SSL access, 
  we can have nginx act as the gatekeeper 
  redirecting all requests back to a single non-SSL WSGI instance listening on the localhost. 
- Here’s what that would look like:
server {
  listen       67.207.128.83:443; #replace with your own ip address
  server_name  domain.com;
  root        /var/www/domain.com/;
  access_log  /var/log/nginx/domain.com.access.log;

  ssl on;
  ssl_certificate /etc/nginx/ssl/certs/domain.com.crt;
  ssl_certificate_key /etc/nginx/ssl/private/domain.com.key;
  ssl_prefer_server_ciphers       on;
  
  # Check if a file exists at /var/www/domain/ for the incoming request.
  # If it doesn't proxy to Gunicorn/Django.
  try_files $uri @django;
  
  # Setup named location for Django requests and handle proxy details
  location @django {
    proxy_pass         http://django;
    proxy_redirect     off;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Protocol ssl;
  }
  	    
}
- You can include this code at the bottom of your non-SSL configuration file.

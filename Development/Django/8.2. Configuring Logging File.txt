====================================================
Configuring logging
===================================================
- By default, Django uses the dictConfig format to configure logging.
- you use LOGGING to define a dictionary of logging settings
- These settings describes the loggers, handlers, filters and formatters 
  that you want in your logging setup, and the log levels and other properties that you want those components to have.
- If the disable_existing_loggers key in the LOGGING dictConfig is set to True
  then all loggers from the default configuration will be disabled.
- you can set disable_existing_loggers to False and redefine some or all of the default loggers; 
  or you can set LOGGING_CONFIG to None and handle logging config yourself.

Examples
-----------
- here’s a small configuration that will allow you to output all log messages to the console:
- settings.py
	import os

	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'handlers': {
			'console': {
				'class': 'logging.StreamHandler',
			},
		},
		'root': {
			'handlers': ['console'],
			'level': 'WARNING',
		},
		'loggers': {
			'django': {
				'handlers': ['console'],
				'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
				'propagate': False,
			},
		},
	}
- By default, this config sends messages from the django logger of level INFO or higher to the console. 
  This is the same level as Django’s default logging config, except that the default config only displays log records when DEBUG=True.
- you can also set the environment variable DJANGO_LOG_LEVEL=DEBUG 
  to see all of Django’s debug logging which is very verbose as it includes all database queries.

- configuration which writes all logging from the django named logger to a local file:
	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'handlers': {
			'file': {
				'level': 'DEBUG',
				'class': 'logging.FileHandler',
				'filename': '/path/to/django/debug.log',
			},
		},
		'loggers': {
			'django': {
				'handlers': ['file'],
				'level': 'DEBUG',
				'propagate': True,
			},
		},
	}

- fairly complex logging setup:

	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'formatters': {
			'verbose': {
				'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
				'style': '{',
			},
			'simple': {
				'format': '{levelname} {message}',
				'style': '{',
			},
		},
		'filters': {
			'special': {
				'()': 'project.logging.SpecialFilter',
				'foo': 'bar',
			},
			'require_debug_true': {
				'()': 'django.utils.log.RequireDebugTrue',
			},
		},
		'handlers': {
			'console': {
				'level': 'INFO',
				'filters': ['require_debug_true'],
				'class': 'logging.StreamHandler',
				'formatter': 'simple'
			},
			'mail_admins': {
				'level': 'ERROR',
				'class': 'django.utils.log.AdminEmailHandler',
				'filters': ['special']
			}
		},
		'loggers': {
			'django': {
				'handlers': ['console'],
				'propagate': True,
			},
			'django.request': {
				'handlers': ['mail_admins'],
				'level': 'ERROR',
				'propagate': False,
			},
			'myproject.custom': {
				'handlers': ['console', 'mail_admins'],
				'level': 'INFO',
				'filters': ['special']
			}
		}
	}

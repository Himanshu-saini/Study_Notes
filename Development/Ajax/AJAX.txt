AJAX = Asynchronous JavaScript And XML.
AJAX just uses a combination of:

A browser built-in XMLHttpRequest object (to request data from a web server)
JavaScript and HTML DOM (to display or use the data)

The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. 
This means that it is possible to update parts of a web page, without reloading the whole page.
variable = new XMLHttpRequest();

For security reasons, modern browsers do not allow access across domains.
This means that both the web page and the XML file it tries to load, must be located on the same server.

XMLHttpRequest Object Methods:
new XMLHttpRequest()	            Creates a new XMLHttpRequest object
abort()	                            Cancels the current request
getAllResponseHeaders()	            Returns header information
getResponseHeader()	                Returns specific header information
open(method, url, async, user, psw)	Specifies the request
                                    method: the request type GET or POST
                                    url: the file location
                                    async: true (asynchronous) or false (synchronous)
                                    user: optional user name
                                    psw: optional password
send()	                            Sends the request to the server
                                    Used for GET requests
send(string)	                    Sends the request to the server.
                                    Used for POST requests
setRequestHeader()	                Adds a label/value pair to the header to be sent

XMLHttpRequest Object Properties:
onreadystatechange	        Defines a function to be called when the readyState property changes
readyState	                Holds the status of the XMLHttpRequest.
                            0: request not initialized
                            1: server connection established
                            2: request received
                            3: processing request
                            4: request finished and response is ready
responseText	            Returns the response data as a string
responseXML	                Returns the response data as XML data
status	                    Returns the status-number of a request
                            200: "OK"
                            403: "Forbidden"
                            404: "Not Found"
statusText	                Returns the status-text (e.g. "OK" or "Not Found")

Send a Request To a Server:
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();

always use POST requests when:

A cached file is not an option (update a file or database on the server).
Sending a large amount of data to the server (POST has no size limitations).
Sending user input (which can contain unknown characters), POST is more robust and secure than GET.

using a fixed url in open,you may get a cached result. To avoid this, add a unique ID to the URL:
xhttp.open("GET", "demo_get.asp?t=" + Math.random(), true);
xhttp.send();

To POST data like an HTML form, add an HTTP header with setRequestHeader(). 
Specify the data you want to send in the send() method:
xhttp.open("POST", "ajax_test.asp", true);
xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhttp.send("fname=Henry&lname=Ford");

By sending asynchronously, the JavaScript does not have to wait for the server response, but can instead:
execute other scripts while waiting for server response
deal with the response after the response is ready

Synchronous Request:
Since the code will wait for server completion, there is no need for an onreadystatechange function

ASynchronous Request:
The onreadystatechange function is called every time the readyState changes.
When readyState is 4 and status is 200, the response is ready:
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}

Using a Callback Function:
The function call should contain the URL and what function to call when the response is ready

function loadDoc(url, cFunction) {
  var xhttp;
  xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      cFunction(this);
    }
  };
  xhttp.open("GET", url, true);
  xhttp.send();
}

Server Response Properties:
responseText	get the response data as a string
responseXML 	get the response data as XML data

The responseXML Property
The XMLHttpRequest object has an in-built XML parser.
The responseXML property returns the server response as an XML DOM object.
xmlDoc = xhttp.responseXML;
txt = "";
x = xmlDoc.getElementsByTagName("ARTIST");
for (i = 0; i < x.length; i++) {
  txt += x[i].childNodes[0].nodeValue + "<br>";
}
document.getElementById("demo").innerHTML = txt;

The getAllResponseHeaders() function returns all the header information of a resource, like length, server-type, content-type, last-modified, etc

The getResponseHeader() method returns specific header information from the server response.
Ex. this.getResponseHeader("Last-Modified");





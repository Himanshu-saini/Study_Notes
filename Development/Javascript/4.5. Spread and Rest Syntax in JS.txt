=============================
Spread and Rest Syntax in JS
=============================

Spread syntax (...)
======================
- Explore
  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  
- allows an iterable such as an array expression or string to be expanded 
  in places where zero or more arguments (for function calls) 
  or elements (for array literals) are expected,
  or an object expression to be expanded in places 
  where zero or more key-value pairs (for object literals) are expected.

- Ex.
  function sum(x, y, z) {
    return x + y + z;
  }
  const numbers = [1, 2, 3];
  console.log(sum(...numbers));  // expected output: 6
  console.log(sum.apply(null, numbers));  // expected output: 6  
  // apply() 

Syntax
-------
- For function calls:
  - myFunction(...iterableObj);
- For array literals or strings:
  - [...iterableObj, '4', 'five', 6];
- For object literals (new in ECMAScript 2018):
  - let objClone = { ...obj };


Rest Syntax 
===========
- Explore:
  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters

- rest syntax is the opposite of spread syntax. 
- rest syntax collects multiple elements and "condenses" them into a single element.
- allows us to represent an indefinite number of arguments as an array.
- Ex 
  function sum(...theArgs) {
    return theArgs.reduce((previous, current) => {
      return previous + current;
    });
  }
  console.log(sum(1, 2, 3));  // expected output: 6
  console.log(sum(1, 2, 3, 4));  // expected output: 10

- Syntax
  function f(a, b, ...theArgs) {
    // ...
  }
==================
Best Practices DRF 
==================

- Use Mixins in Viewsets
  - class TagViewSet( mixins.ListModelMixin, mixins.CreateModelMixin, mixins.RetrieveModelMixin, GenericViewSet):
    """
    The following endpoints are fully provided by mixins:
    * List view
    * Create view
    """
    queryset = Tag.objects.all()
    serializer_class = TagSerializer
    permission_classes = (permissions.IsAuthenticated,)

  - actions: .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy()

- Using Routers for resource
  - quickly declare all of the common routes for a given resourceful controller.
  - Ex.
    from rest_framework import routers

    router = routers.SimpleRouter() 
    router.register(r'users', UserViewSet)
    router.register(r'accounts', AccountViewSet)
    urlpatterns = router.urls
	OR
    api_router.register(r'tag', TagViewSet, 'tag')

    urlpatterns = [
      url(r'^v1/', include(api_router.urls, namespace='v1'))
    ]

- Using SerializerMethodField
  - read only field that computes its value at request processing time
    by calling a method on the serializer class it is attached to.
  - SerializerMethodField accepts method_name, defualt = get_<field_name> (prefered)
  - Change the way a field is represented in API response
  - Ex 
  class TagSerializer(serializers.ModelSerializer):
    created = serializers.SerializerMethodField()

    class Meta:
        model = Tag
        fields = ('label', 'created')

    def get_created(self, obj):
      return round(obj.created.timestamp())

- source parameter
  - rename field name in API response 
  - job_type = serializers.CharField(source='task_type')
    - task_type in Model will be represented as job_type in API 
  - fetch data from related objects using dotted notation
    owner_email = serializers.CharField(source='owner.email')
	
- Serializer field validation
  - decouples different checks that are related only to a particular field
  - generates well formatted error responses
  - method naming convention: def validate_<field_name>
  - Ex  
    class TransactionSerializer(serializers.ModelSerializer):
      bid = serializers.IntegerField()

	  def validate_bid(self, bid: int) -> int:
        if bid > self.context['request'].user.available_balance:
            raise serializers.ValidationError(
                _('Bid is greater than your balance')
            )
      return bid
  - Validation methods must always return a value
  - field level validation is invoked by serializer.to_internal_value(), 
    which takes place before calling serializer.validate().

- Passing a value directly to the save method
  - to pass a value from outside of a serializer directly to its save() method
  - take arguments that can be equated with serialized objects
  - Values passed this way won’t be validated
  - Ex 
    serializer = EmailSerializer(data=request.data)
    serializer.is_valid(raise_exception=True)
    serializer.save(owner_id=request.user.id)

- Using CurrentUserDefault
  - automatically setting a user as a resource owner
  - CurrentUserDefault class, which doesn’t require any override of views.
  - class EmailSerializer(serializers.ModelSerializer):
    owner = serializers.HiddenField(
        default=serializers.CurrentUserDefault()
    )
	# Owner = field name 

  - user authenticated in the request object will be set as default
  - because of using HiddenField, any incoming data is not taken into account
    so it’s impossible to set another user as an owner

- Serializers initial data
  - data before modified by running serializer.is_valid()
  - before validated_data is available 
  - serializer.initial_data which stores raw input as a Dict
  - Ex 
    class SignupSerializer(serializers.ModelSerializer):
      password1 = serializers.CharField()
      password2 = serializers.CharField()

	  def validate_password1(self, password1):
      if password1 != self.initial_data['password2']:
        raise serializers.ValidationError(
            'Passwords do not match'
        )
- Handling multiple creates/updates/deletes in nested serializers
  - little tricky when you have to support multiple creates, updates and deletes 
    in nested serializers within one high-level serializer
  - trade-off: there is a smaller number of requests to process at the cost of a longer processing time
  - By default, DRF doesn’t support multiple updates at all.
  
  - two paths
    - quite popular, third party library
      https://github.com/beda-software/drf-writable-nested
    - do it on your own 
  
  - Create own 
    - Assumptions:
	  - all items that should be updated have id,
	  - all items that should be created don’t have id,
	  - all items that should be deleted are present in data storage (eg. database), but are missing in the incoming request.data
	- Ex 
	class CUDNestedMixin(object):
    @staticmethod
    def cud_nested(
        queryset: QuerySet,
        data: List[Dict],
        serializer: Type[Serializer],
        context: Dict
    ):
    """
    Logic for handling multiple updates, creates and deletes on nested resources
    :param queryset: queryset for objects existing in DB
    :param data: initial data to validate passed from higher level serializer to nested serializer
    :param serializer: nested serializer to use
    :param context: context passed from higher level serializer
    :return N/A
    """
    updated_ids = list()
    for_create = list()
    for item in data:
        item_id = item.get('id')
        if item_id:
            instance = queryset.get(id=item_id)
            update_serializer = serializer(
                instance=instance,
                data=item,
                context=context
            )
            update_serializer.is_valid(raise_exception=True)
            update_serializer.save()
            updated_ids.append(instance.id)
        else:
            for_create.append(item)

    delete_queryset = queryset.exclude(id__in=updated_ids)
    delete_queryset.delete()

    create_serializer = serializer(
        data=for_create,
        many=True,
        context=context
    )
    create_serializer.is_valid(raise_exception=True)
    create_serializer.save()
	-----
	from rest_framework import serializers

	class AccountSerializer(serializers.ModelSerializer, CUDNestedMixin):
	  phone_numbers = PhoneSerializer(
		many=True,
		source='phone_set',
	  )

	  class Meta:
        model = User
        fields = ('first_name', 'last_name', 'phone_numbers')

      def update(self, instance, validated_data):
        self.cud_nested(
            queryset=instance.phone_set.all(),
            data=self.initial_data['phone_numbers'],
            serializer=PhoneSerializer,
            context=self.context
        )
        ...
        return instance
	---
	- nested objects should consume initial_data instead of validated_data
	  That’s because running validation calls field.to_internal_value() on each of a serializer’s fields, 
	  which may modify data stored by a particular field (eg. by changing primary key to model instance).

- Override data to force ordering
  - By default, Django querysets are not ordered at all.
  - Commonly achieved by adding ordering to the view’s queryset
    - but nested rources are not odered
    - For read-only fields, it can be done within SerializerMethodField
  - To get ordered writable nested field,  serializer’s data property can be overridden
    @property
    def data(self):
      data = super().data
      data['phone_numbers'].sort(key=lambda p: p['id'])
      return data

- Solving Slow Queries by Eliminating the N+1 Query Problem
  - While gettign nested data, Django make multiple call to DB (N) for each row of parent table
  - If we think this in terms of a raw SQL query, this can be achieved with a simple Inner Join operation
  - Django provides selected_related and prefetch_related to handle query problems around related objects. 
    - select_related works on forward ForeignKey, OneToOne, and backward OneToOne relationships 
	  by creating a database JOIN and fetching the related field data in one single query. ‍
    - prefetch_related works on forward ManyToMany and in reverse, ManyToMany, ForeignKey. 
	  prefetch_related does a different query for every relationship and plays out the "joining" in Python. 
  - Ex 
    class BookListCreateAPIView(generics.ListCreateAPIView):
      serializer_class = BookSerializer

      def get_queryset(self):
       queryset = Book.objects.select_related("author").all()
       return queryset

- Custom Response Format
  - For JSON , we override the rest_framework.renderers.JSONRenderer.
  - Create renderers.py 
    from rest_framework.renderers import JSONRenderer
	from rest_framework.views import exception_handler


	class CustomJSONRenderer(JSONRenderer):
      def render(self, data, accepted_media_type=None, renderer_context=None):
       # reformat the response
       response_data = {"message": "", "errors": [], "data": data, "status": "success"}
       # call super to render the response
       response = super(CustomJSONRenderer, self).render(
           response_data, accepted_media_type, renderer_context
       )
	   return response  

  - add it to  DRF settings
    - REST_FRAMEWORK = {
	    "DEFAULT_RENDERER_CLASSES": (
          "core.renderer.CustomJSONRenderer",
          "rest_framework.renderers.JSONRenderer",
          "rest_framework.renderers.BrowsableAPIRenderer",
	    )
	  }


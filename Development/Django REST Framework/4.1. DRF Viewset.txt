============
DRF Viewset
============

- https://www.django-rest-framework.org/api-guide/viewsets/
- Django REST framework allows you to combine the logic 
  for a set of related views in a single class, called a ViewSet

-  like 'Resources' or 'Controllers'.
-  type of class-based View, that does not provide any method handlers 
   such as .get() or .post(), and instead provides actions such as .list() and .create()

- .as_view() method is used to set the handler corresponding to an action 
  - Ex.
    user_list = UserViewSet.as_view({'get': 'list'})
    user_detail = UserViewSet.as_view({'get': 'retrieve'})

- advantages of using a ViewSet class over using a View class
  - Repeated logic can be combined into a single class.
  - By using routers, we no longer need to deal with wiring up the URL conf ourselves
  
- Marking extra actions for routing (Adding API for router)
  -------------------
  - mark method with the @action decorator to make it routable
  - action decorator will route GET requests by default
  - can  override any viewset-level configuration such as 
    permission_classes, serializer_class, filter_backends
  - Ex.
    @action(detail=True, methods=['post'])
    def set_password(self, request, pk=None):
        user = self.get_object()
        serializer = PasswordSerializer(data=request.data)
        if serializer.is_valid():
            user.set_password(serializer.validated_data['password'])
            user.save()
            return Response({'status': 'password set'})
        else:
            return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)



API View 
===========

Function Based view 
--------------
- Lengthy and unreadable
- Flexible and powerful

- from rest_framework.decorators import api_view

- @api_view(<Allowed HTTP verbs>)
  - User to convert a method in api view method
  - Allowed HTTTP Verbs = List containing allowed http verbs 
  
- Ex 
  @api_view(["GET"])
  def api_home(requests,*args,**kwargs):
    ...
    return Response(data)

- Example
  ----
  @api_view(['GET','POST'])
  def product_fun_view(request, *args, **kwargs):
    if request.method == 'GET':
      pk = kwargs.get("pk")
      if pk is not None:
        # Details view 
      # List View 
      obj = Product.object.all()
      data = ProductSerializer(obj, many=True).data
      return Response(data)
    elif request.method == 'POST':
      # Create View 


Class based view 
-------
- Readable
- flexible through customization

classs ProductMixinView(generics.GenericAPIView):
  def get():  # HTTP -> get
    pass 
  def post():  # HTTP -> post
    pass

- user function to allow different HTTP methods


Types
=====

ViewSet
-----
- The ViewSet class inherits from APIView

GenericViewSet
--------------
- The GenericViewSet class inherits from GenericAPIView

ModelViewSet
------------
- The ModelViewSet class inherits from GenericAPIView
- includes implementations for various actions, by mixing in the behavior of the various mixin classes.

- actions provided by the ModelViewSet class are 
  .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy()

- Because ModelViewSet extends GenericAPIView, you'll normally need to provide 
  at least the queryset and serializer_class attributes.

- class AccountViewSet(viewsets.ModelViewSet):
    queryset = Account.objects.all()
    serializer_class = AccountSerializer
    permission_classes = [IsAccountAdminOrReadOnly]

ReadOnlyModelViewSet
--------------------
- The ReadOnlyModelViewSet class also inherits from GenericAPIView
- only provides the 'read-only' actions, .list() and .retrieve()
- provide at least the queryset and serializer_class attributes

Custom ViewSet base classes
------------------------
- Ex.  
  from rest_framework import mixins
  class CreateListRetrieveViewSet(mixins.CreateModelMixin,
                                mixins.ListModelMixin,
                                mixins.RetrieveModelMixin,
                                viewsets.GenericViewSet):
    pass
  - provides create, list and retrieve operations by inheriting from GenericViewSet, and mixin

==========================
Time and Space Complexity
==========================

- Time Complexity 
  ---------------
  - time taken by algorithm to execute 
- Space Complexity 
  -----------------
  - space required by the algo to execute 

- We try to minimise Time complexity more
  as there is no problem for space availability.
  
- General asumptions taken while calculation complexity 
  - Sequential execution is performed
  - Arithmetic and logical operation takes 1 unit 
  - Assignment and return takes 1 unit 
  - Read and write operation takes 1 unit

- While computing the complexity,
  the least significant terms are removed
  - as the size of input increases the 
    least significant terms becomes neligible.
	
- Constaint time complexity
  -------------------------
  - when time complexity does not depends on input
  - When there is no iterative or recursive statements in code.
  - O(1)
- Linear time complexity 
  -----------------------
  - time complexity increases linearly with the input size
  - O(n)
- Polynomial Time complexity 
  ----------------------------
  - O(n^x)
- logarithmic time complexity 
  -----------------------------
  - O(log(n))

Asymptotic Notations
=====================
- mathematical representation of time complexity

Types
------
- Big oh (O)
  -----------
  - Maximum time taken by algo for all input value
  - worst case senerio
  - let f(n) is time complexity and g(n) is most significant term
    if, f(n) < c*g(n) , c>0, n>n0>1
	then, f(n) = O(g(n)) 
- Big Omega (Ω)
  --------------
  - Minimum time taken by the algo 
  - Best case senerio
  - let f(n) is time complexity and g(n) is most significant term
	if, f(n) > c*g(n) , c>0, n>n0>1
	then, f(n) = Ω(g(n)) 
	
- Big Theta (θ)
  -------------
  - Average time taken by the algo 
  - Average case senerio
  - Let f(n) is time complexity and g(n) is most significant term
	if, c1*g(n) <= f(n) <= c2*g(n) , c1,c2>0, n>n0>1
	then, f(n) = θ(g(n)) 

- In asymptotic analysis, we consider 
  growth of algorithm in term of input size.
  An algorithm X is sad to be asymptotically better
  if X takes smaller time then Y for all input sizes N 
  larger than a value N0, where N0>0.

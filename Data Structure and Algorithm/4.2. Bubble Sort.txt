==============
Bubble Sort
==============
- Traverse the whole array and place largest element in the last

Steps
-----
- Traverse the array and compare teh adjecent elements
- If the next element is smaller that the current element,
  swap both elements.
- At the end of first iteration, largest element will be at the last position.
- Repeat the procedure "N" times to sort teh whole array.

Code
-----
void bubbleSort(int arr[], int n){
  for(int i=n-1;i>=0;i--){
    for(int j=0;j<i;j++){
	  if(arr[j]>arr[j+1]){
	    swap(arr[j],arr[j+1]);
	  }
	}
  }
}

Complexity
------------
- Time complexity
  - The loop will run as: n + (n-1) + (n-2) + .... + 1
    = Sum of N natural numbers = n(n+1)/2

  - Worst case complexity = Best case Complexity = log(n^2)

  - Improve teh best case complexity by keeping a "flag" variable
    and set it to True if the the swapping is performed.
    If there is no swapping the flag will be false and exit the loop.

- Space complexity = O(1)

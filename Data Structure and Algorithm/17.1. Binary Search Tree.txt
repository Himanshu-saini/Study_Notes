===================
Binary Search Tree
===================

- Binary tree where 
  - left tree nodes < Parent value
  - right tree nodes > parent value 
  
- All nodes are unique
- helps in minimizing search complexity

- Drawback
  - The tree can become skew (i.e., all nodes on one side)
    and increase the search complexity to O(n)
    - overcome by using AVL tree (Balanced BST)

- Balance factor
  - difference between height of left subtree and right subtree
  - For AVL tree, balance factor = 0 or 1

- InOder traversal of BST will give a sorted list of numbers

Implementation
================
struct BSTNode{
  int data;
  BSTNode* left;
  BSTNode* right;
};

Operations on BST 
===================
- Inserting an Element
- Deleting an Element
- Searching an Element
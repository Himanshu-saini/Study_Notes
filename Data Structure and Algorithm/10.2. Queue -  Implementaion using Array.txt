===================================
Queue -  Implementaion using Array
===================================

Using Structure
---------------

struct Queue{
  int front,rear;
  int size,capacity;
  int* arr;
};

Queue* createQueue(int capacity){
  Queue* qu = new Queue();
  qu->capacity = capacity;
  qu->front=0;
  qu->rear = capacity-1;  // or -1
  qu->size=0;
  qu->arr = new int(qu->capacity);
}

bool isQueueFull(Queue* qu){
  return qu->size==qu->capacity;
}
bool isQueueEmpty(Queue* qu){
  return qu->size==0;
}

void enqueue(Queue* qu, int data){
  if(isQueueFull()){
    cout<<"Queue overflow";
	return;
  }
  qu->rear = (qu->rear +1)%(qu->capacity);
  qu->arr[qu->rear]=data;
  qu->size += 1;
}

int dequeue(Queue* qu){
  if(isQueueEmpty()){
    cout<<"Queue underflow";
	return INT_MIN;
  }
  int output = qu->arr[qu->front];
  if(qu->front==qu->rear){
    qu->front = 0;
	qu->rear = -1;
  }
  else
    qu->front = (qu->front +1)%(qu->capacity);
  qu->size -= 1;
  return output;
}

int queueFront(Queue* qu){
  if(isQueueEmpty(qu))
    return INT_MIN;
  return qu->arr[qu->front];
}

int queueRear(Queue* qu){
  if(isQueueEmpty(qu))
    return INT_MIN;
  return qu->arr[qu->rear];
}

int printQueue(Queue* qu){
  for(int i=0;i<qu->size;i++){
    cout<<qu->arr[(qu->front+i)%qu->capacity]<<" ";
  }
}

Using Class
---------------

class Queue{
  int front,rear;
  int size,capacity;
  int* arr;
  
  public:

  Queue(int capacity){
    this->capacity = capacity;
    front=0;
    rear = capacity-1;  // or -1
    size=0;
    arr = new int(capacity);
  }

  bool isQueueFull(){
    return size==capacity;
  }
  bool isQueueEmpty(){
    return size==0;
  }

  void enqueue(int data){
    if(isQueueFull()){
      cout<<"Queue overflow";
	  return;
    }
    rear = (rear +1)%(capacity);
    arr[rear]=data;
    size += 1;
  }

  int dequeue(){
    if(isQueueEmpty()){
      cout<<"Queue underflow";
	  return INT_MIN;
    }
    int output = arr[front];
    if(front==rear){
      front = 0;
	  rear = -1;
    }
    else
      front = (front +1)%(capacity);
    size -= 1;
    return output;
  }

  int queueFront(){
    if(isQueueEmpty())
      return INT_MIN;
    return arr[front];
  }

  int queueRear(){
    if(isQueueEmpty())
      return INT_MIN;
    return arr[rear];
  }

  int printQueue(){
    for(int i=0;i<size;i++){
      cout<<arr[(front+i)%capacity]<<" ";
    }
  }
}
  
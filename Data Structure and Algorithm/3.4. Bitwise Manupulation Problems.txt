=============================
Bitwise manupulation Problems 
=============================
- Given an array having all number repeating more than 1,
  find the number which only occur once.
  - Solution 1 (without Bit Manupulation):
    - Use hashmap to store the frequency of each eleemnt
	- Time complexity = O(n) + O(n)
	- Space complexity = o(n)
  - Solution 2 (without Bit Manupulation):
    - Sort array and check adjecent number 
	- If both adject number for a number is different 
	  then it occur only once 
	  
  - Solution 3 (Bit Manupulation):
    - if all other number is repeating even number of times
	- As we know A^A = 0 and A^0 = A
    - Do XOR of all elements to get the number 
	  occuring odd number of times 
    - Time complexity = O(n)

- Given an array having all number repeating more than 1,
  find 2 numbers which only occur once.
  - Solution 1 and 2 from above 
  - Solution 3:
    - if all other elements are repeating even times
    - Find XOR of all elements 
	- We get XOR of 2 non repeating elements 
	- Get mask of least set-bit for the above XOR result 
	- if (arr[i] & mask) == 0
	  num1 = num1 ^ arr[i]
	  - All the number in this group will be in pairs 
	    except one of the 2 non repeating element
	  else
	  num2 = num2 ^ arr[i]
	  - All the number in this group will be in pairs 
	    except one of the 2 non repeating element
	- program:
	  int xor=0;
	  for(i=0;i<n;i++){
	    xor=xor^arr[i];
	  }
	  int mask = xor & -xor
	  int num1=0,num2=0;
	  for(i=0;i<n;i++){
	    if( (arr[i] & mask)==0)
		  num1 = num1^arr[i];
		else 
		  num2 = num2^arr[i];
	  }
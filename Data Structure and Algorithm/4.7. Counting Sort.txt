===============
Counting Sort
===============

- Stable Algorithm i.e., maintain same order as in unsorted array
- Non comparision based algo

Steps
------
- Let the range of elements in input array is 1 to k
- Create a new array of length k, count[k].
- Store the ferquency of each element in input array
  in count[].
- Modify the count[] array to store the cummulative frequency.
- Create a new array of length k, sortedArr[k]
- Traverse the input array from backward and place that element 
  in sortedArr[] according to its index in count[]
- Decrease the value in count[] after placing a corresponding
  element.

Code 1: Not for Negative Numbers 
---------------------------------
#include <bits/stdc++.h> 
#include <string.h> 
using namespace std; 
  
void countSort(char arr[], int size, int range) { 
  char sortedArr[size]; 
  
  int count[range], i; 
  
  // set each index to value 0
  memset(count, 0, sizeof(count)); 
  
  // Store frequency of each character 
  for (i = 0; arr[i]; ++i) 
    ++count[arr[i]]; 

  // Store cumulative Frequency
  for (i = 1; i <= range; ++i) 
    count[i] += count[i - 1]; 
  
  // copy element from arr[] to its sorted position in sortedArr[]
  for(i = size; i>=0; --i){  
    sortedArr[count[arr[i]]-1] = arr[i];  
    --count[arr[i]];  
  }
  
  // Copy the output array to arr 
  for (i = 0; arr[i]; ++i) 
    arr[i] = sortedArr[i]; 
}

Code 2: Include Negative Numbers
---------------------------------

#include <algorithm> 
#include <iostream> 
#include <vector> 
using namespace std; 

void countingSort(vector<int>& arr[]){
  int max = *max_element(arr.begin(), arr.end()); 
  int min = *min_element(arr.begin(), arr.end()); 
  int range = max - min + 1; 
  
  vector<int> count(range), sortedArr(arr.size());
  
  // Store frequency of each character 
  for (int i = 0; i < arr.size(); i++) 
    count[arr[i] - min]++; 
  
  // Store cumulative Frequency
  for (int i = 1; i < count.size(); i++) 
    count[i] += count[i - 1]; 
  
  for (int i = arr.size() - 1; i >= 0; i--) { 
    sortedArr[count[arr[i] - min] - 1] = arr[i]; 
    count[arr[i] - min]--; 
  } 
  
  // Copy the output array to arr 
  for (int i = 0; i < arr.size(); i++) 
    arr[i] = sortedArr[i]; 
} 

Complexity
------------
- Time complexity:
  - Best case = worst case 
    = O(k) + O(n) + O(k) + O(n)
    = O(k+n) 
	= O(n) if n >> k
	or O(k) if k >> n

- Space Complexity = O(n+k) 
=================
Usefull Methods
=================

- __FILE__ 
  --------
  - magic variable that contains the name of the current file.

- $0 
  ----
  - name of the file used to start the program
  
- object_id 
  ----------
  - returns the identity of an Object.
  - Same object_id means point to the same Object in memory
  - Ex: 
    > name.object_id
    > "Himanshu".object_id
  
- instance_methods
  -----------------
  - List all methods of a class
  - Ex. Person.instance_methods
    - Also include methods of ancestor classes
  - Ex. Person.instance_methods(false) 
    - Do not list methods of ancestor class
  
- respond_to?
  -----------
  - checks whether a method is available/reposnds to
    an object
  - return true/false
  - Ex. p1.responds_to?("printDetails")  // true
    - access class method
  - Ex. p1.responds_to?("name")  // false
    - access instance variable
  - Ex. p1.responds_to?("name=")  // false
    - check if the instance variable can be changed/set or not

- mil?
  ----
  - checks if a variable has nil value
  - return true/false
  - Ex: var.nil?
  
- to_s
  -----
  - convert object to string
  - defined by default for every object
  - Ex. obj.to_s

- join
  -----
  - join each value in a list with a string
  - returns a Sring
  - Ex.
    - nameList.join(". ")  // return a string having all name

- to_proc
  --------
  - convert a ruby symbol to a procedure(method) object 
  - Ex.
    :upcase.to_proc.call("hello") # => "HELLO"
	[:upcase,:downcase,:capitalize].map{ |x| x.to_proc.call("hello")} # => apply each procedure to string

- seriazable_hash
  ----------------
  - Converts a class object to a hash
    - "attributes" hash must be defined and should contain any attributes you need to be serialized.
  - Ex 
    class Person
	  include ActiveModel::Serialization
	  attr_accessor :name, :age
	  def attributes
		{'name' => nil, 'age' => nil}
	  end
	end
	
	person = Person.new
	person.name = 'bob'
	person.age  = 22
	person.serializable_hash                # => {"name"=>"bob", "age"=>22}
	person.serializable_hash(only: :name)   # => {"name"=>"bob"}
	person.serializable_hash(except: :name) # => {"age"=>22}
	person.serializable_hash(methods: :capitalized_name)
	# => {"name"=>"bob", "age"=>22, "capitalized_name"=>"Bob"}
	person.serializable_hash(include: :address)
	person.serializable_hash(include: { address: { only: 'city' }})

=============
2D Arrays 
=============
- Syntax:
  <data type> <var name>[<row size>][<column size>]

- Ex.
  int a[10][10]  // Declaration 
  int b[2][3] = { {1,2,3}, {3,5,6} }  // Initialization
  cout<< b[1][2]  // Accesing element 
  
- While initializing 2D array either both dimention should be given 
  or the column size should be giveb
  Ex. 
  int a[10][5];
  int a[][3] = { {1,2,3}, {4,5,6} };
  int (*ptr)[10];  // ptr is a pointer to an array of 10 integers
  
- 2D array is represented by double pointer.
  - Ex.
    int a[5][5];
	**a // equalent to a[0][0]
	*(*a+1)  // equilent to a[1][0]
	*(*a+1)+2 // equilent to a[1][2]

========================================
Passing 2D array as Function Paramenter
========================================
- Function paramenter can be defined as:
  Type 1 : Both rows and columns are defined
  -------
  int fun(int a[3][3]) 
  { ... }
  
  Type 2 : Only Columns are defined
  ------
  int fun(int a[][3])
  { ... }
  
  Type 3 : Paramenter is defined as pointer to array
  ------
  int fun(int (*a)[3])
  { ... }
  
  - In type 2 declaration, compiler implicitly rewrite parameter 
    from "Array of Array" to "Pointer to Array"
  - In Type 3 declaration, parameter is already as "Pointer to Array"
  - Since the called function does not allocate space for teh array, 
    it does not know the overall size of the array, So Number of rows is omited.
	Width of the array is still important, so Number of columns is mentioned.

========================
Multi Dimentional Array 
========================
- Array can have multiple dimentions according to our needs
- Numbre of dimentions is set during the array declaration 
  by ading new [<size] 
- multidimensional array must have bounds for all dimensions except the first

- Syntax 
  <Data type> <var>[<size1>][<size2>][<size3>]...
  
- Ex.
  int a[2][3][5];  // 3D Array 

- While passing multiple dimentional array to function,
  the intervening sizes are mentioned.
  Ex.
  Type 1 : Both rows and columns are defined
  -------
  int fun(int a[3][3][3]) 
  { ... }
  
  Type 2 : Only Columns are defined
  ------
  int fun(int a[][3][3])
  { ... }
  
  Type 3 : Paramenter is defined as pointer to array
  ------
  int fun(int (*a)[3][3])
  { ... }
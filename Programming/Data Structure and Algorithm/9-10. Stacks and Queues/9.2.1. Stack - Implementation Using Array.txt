========================
Implemention using Array
========================

- Time Complexity
  - push : O(1)
  - pop: O(1)
  
Method 1: Global Array
-----------------------

int size=10;  // global variable
int stack[size];  // global variable
int top = -1;  // global variable

void push(int data){
  if(top==size-1){
    cout<<"Stack Overflow";
	return ;
  }
  top+=1;
  stack[top]=data;
  return;
}

int pop(int data){
  if(top == -1){
    cout<<"Stack Underflow";
	return INT_MIN;
  }
  int popData = stack[top];
  top-=1;
  return popData;
}


Method 2: Structure
--------------------

struct stack{
  int capacity;
  int top;
  int *arr;  // stack array
};

stack* initializeStack(int capacity){
  stack* st = new stack();
  st->capacity = capacity;
  st->top=-1;
  st->arr = new int(capacity);
  return st;
}

bool isEmptyStack(stack* st){
  return st->top==-1;
}

bool isFullStack(stack* st){
  return st->top==st->capacity;
}

bool stackSize(stack* st){
  return st->top+1;
}

void push(stack* st,int data){
  if(isFullStack(st)){
    cout<<"Stack Overflow";
	return;
  }
  st->top +=1;
  st->arr[st->top]=data;
}

int pop(stack* st){
  if(isEmptyStack(st)){
    cout<<"Stack UnderFlow";
	return INT_MIN;
  }
  int popData = st->arr[st->top];
  st->top -=1;
  return popData;
}

int peek(stack* st){
  if(isEmptyStack(st)){
    cout<<"Stack Empty";
	return INT_MIN;
  }
  return st->arr[st->top];
}


Method 3: Class
---------------------------

class Stack{
  int capacity;
  int top;
  int *arr;  // stack array

  Stack(int capacity){
    this->capacity = capacity;
    top=-1;
    arr = new int(capacity);
  }

  bool isEmptyStack(){
    return top==-1;
  }

  bool isFullStack(){
    return top==capacity;
  }

  bool stackSize(){
    return top+1;
  }

  void push(int data){
    if(isFullStack()){
      cout<<"Stack Overflow";
	  return;
    }
    top +=1;
    arr[top]=data;
  }

  int pop(){
    if(isEmptyStack()){
      cout<<"Stack UnderFlow";
	  return INT_MIN;
    }
    int popData = arr[top];
    top -=1;
    return popData;
  }

  int peek(){
    if(isEmptyStack()){
      cout<<"Stack Empty";
	  return INT_MIN;
    }
    return arr[top];
  }
};
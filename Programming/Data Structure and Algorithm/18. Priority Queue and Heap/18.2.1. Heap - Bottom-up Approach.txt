===================
Bottom-up Approach 
===================
- Convert array, representing complete Binary Tree into heap
  using "build-heap" approach

- Time complexity of Build-heap
  - Methamatically it is proven that build-heap Algo takes
    constant time of order of n/2
  - O(n/2) => O(n)
  
Build-heap Algo 
----------------
- Start from non-leaf node at bottom and move up 
- run a loop from i=(n/2 - 1) to 0 
  and call heapify_dowm() for each i
- heapify_dowm() will check whether element at index i 
  and its 2 childern satisfies the heap property 

- heapify_down(Heap ,size ,index)  // heapification
  - For min-Heap
    - Find minimum elemets among parent, left child, right child
	- Swap the minimum element with the parent
	- call heapify_dowm() for swaped element

  - For max-Heap
    - Find maximum elemets among parent, left child, right child
	- Swap the maximum element with the parent
	- call heapify_dowm() for swaped element
  
  - Time Complexity of heapification
    - O(log n)

Implementation - Min Heap
-------------------------

void Build_Heap(int* Heap,int size){
  for(int i=(n/2 - 1);i>=0;i--){
    heapify_down(Heap ,size, i);
  }
}

void heapify_down(int* Heap,int size,int index){
  int left = (2*index-1);
  int right = (2*index-2);
  int min = index;
  if(left<=size && Heap[left]<Heap[min]){
    min = left;
  }
  if(right<=size && Heap[right]<Heap[min]){
    min = right;
  }
  if(min != index){
    swap(Heap[min], Heap[index]);
	heapify_dowm(Heap, size, min);
  }
}  
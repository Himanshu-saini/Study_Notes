=========================
Largest Zero Sum Subarray
=========================
- Find largest subarray having sum of its element = 0

Method 1:
==========
- Find sum of elements of each possible subarray 
  using nested loop
- Time Complexity: O(n^2)

Method 2:
==========
- Use hashmap
  - unordered_map<int,int> sumHash;
- Traverse each element of array
  - find sum till i th element
    - sum = sum+arr[i]
  - if sum==0 then update max length value
  - add current sum in th e hash map as key and index as value
    - sumHash[sum]=i 
  - if current sum is already in hash map,
    that means sum from that index to current index becomes zero
- Endpoints:
  - if an element = 0
    then it is also valid subarray of length 1

Implementation
---------------
#include <bits/stdc++.h> 
int maxLen(int arr[], int n) 
{ 
    // Map to store the previous sums 
    unordered_map<int, int> sumHash; 
  
    int sum = 0; // Initialize the sum of elements 
    int max_len = 0; // Initialize result 
  
    // Traverse through the given array 
    for (int i = 0; i < n; i++) { 
        // Add current element to sum 
        sum += arr[i]; 
  
        if (arr[i] == 0 && max_len == 0) 
            max_len = 1; 
        if (sum == 0) 
            max_len = i + 1; 
  
        // Look for this sum in Hash table 
        if (sumHash.find(sum) != sumHash.end()) { 
            // If this sum is seen before, then update max_len 
            max_len = max(max_len, i - sumHash[sum]); 
        } 
        else { 
            // Else insert this sum with index in hash table 
            sumHash[sum] = i; 
        } 
    } 
    return max_len; 
} 
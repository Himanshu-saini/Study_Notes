========================
Deletion in Linked List
========================

Deletion at Begining of list
-------------------------------
void deleteAtBegining(node** HEAD){
  if(*HEAD){
    node* deleteNode = *HEAD;
    *HEAD = *HEAD->next;
	delete(deleteNode);
	return;
  }
  cout<<"List is Empty";
}

Deletion at End of list
-------------------------
void deleteAtEnd(node** HEAD){
  if(*HEAD){
    if(HEAD->next == nullptr){
      node* deleteNode = *HEAD;
	  *HEAD = nullptr;
	  delete(deleteNode);
	  return;
	}
	
    node* currPtr = *HEAD;
	while(currPtr->next->next)
	  currPtr = currPtr->next;
	  
    node* deleteNode = currPtr->next;
	currPtr->next = nullptr;
	delete(deleteNode);
	return;
  }
  cout<<"List is Empty";
}

Deleting at an Index of list
-------------------------------
void deleteAtIndex(node** HEAD, int index){
  if(*HEAD){
    if(index==1){
      node* deleteNode = *HEAD;
	  *HEAD = *HEAD->next;
	  delete(deleteNode);
	  return;
	}
	
    node* currPtr = *HEAD;
    int i=1;
    while(currPtr->next){
	  if(i+1==index){
        node* deleteNode = currPtr->next;
	    currPtr->next = currPtr->next->next;
		delete(deleteNode);
	    return;
	  }
	  currPtr = currPtr->next;
	  ++i;
    }
	cout<<"Index out of range";
  }
}

Deleting a value in list
-------------------------------
void deleteValue(node** HEAD, int value){
  if(*HEAD){
	if(*HEAD->data == value){
      node* deleteNode = *HEAD;
	  *HEAD = *HEAD->next;
	  delete(deleteNode);
	  return;
	}
	
    struct node *currPtr = *HEAD;
    while(currPtr->next){
	  if(currPtr->next->data==value){
        node* deleteNode = currPtr->next;
	    currPtr->next = currPtr->next->next;
		delete(deleteNode);
		return;
	  }
	  currPtr = currPtr->next;
    }
	cout<<"Value not found";
  }
}
================================
Deletion in Circular Linked List
================================

Deletion at Begining of list
-------------------------------
void deleteAtBegining(node** TAIL){
  if(*TAIL == nullptr){
    cout<<"List is Empty";
  }
  else if(*TAIL->next == *TAIL){  
    delete(*TAIL);
	*TAIL = nullptr;
  }
  else{
    node* deleteNode = *TAIL->next;
    *TAIL->next = *TAIL->next->next;
	delete(deleteNode);
  }
}

Deletion at End of list
-------------------------
void deleteAtEnd(node** TAIL){
  if(*TAIL == nullptr){
    cout<<"List is Empty";
  }
  else if(*TAIL->next == *TAIL){  
    delete(*TAIL);
	*TAIL = nullptr;
  }
  else{
    node* currPtr = *TAIL;
    node* deleteNode = *TAIL;
	while(currPtr->next != *TAIL)
	  currPtr = currPtr->next;
    currPtr->next = *TAIL->next;
	delete(deleteNode);
  }
}

Deleting at an Index of list
-------------------------------
void deleteAtIndex(node** TAIL, int index){
  if(*TAIL == nullptr){
    cout<<"List is Empty";
  }
  else{
    node* currPtr = *TAIL;
	int i=1;
	while(i<index && currPtr != *TAIL){
	  currPtr = currPtr->next;
	  i++;
	}
    if(currPtr != *TAIL){
      node* deleteNode = currPtr->next;
	  currPtr->next = deleteNode->next;
	  delete(deleteNode);
	}
  }
}

Deleting a value in list
-------------------------------
void deleteValue(node** TAIL, int value){
  if(*TAIL == nullptr){
    cout<<"List is Empty";
  }
  else{
    node* currPtr = *TAIL;
	while(currPtr->next->data != value && currPtr != *TAIL){
	  currPtr = currPtr->next;
	}
    if(currPtr->next->data == value){
      node* deleteNode = currPtr->next;
	  currPtr->next = deleteNode->next;
	  delete(deleteNode);
	}
	else{
	  cout<<"Value not found";
	}
  }
}
===============
Insertion Sort
===============

Steps
------
- Traverse the array starting from the second position
- For each element of the array traversed, find the currect position 
  for it on the left side of the current position.
- i.e., as we traverse the array to right, the lest side of current 
  position becomes sorted.

Code
-----
void insertionSort(int arr[], int n){
  int currNum,currPos;
  for(int i=1;i<n;i++){
    currNum = arr[i];
	currPos = i;
	while(arr[currPos-1] > currNum && currPos>=1){
	  arr[currPos]= arr[currPos-1];
	  currPos--;
	}
	arr[currPos] = currNum;
  }
}

Complexity
-----------
- Time complexity
  - Worst case = O(n^2)  // when array is sort in decreasing order
  - Best case = O(n)
- Space Complexity = O(1)

** Inserting sort works well with partially sorted array.

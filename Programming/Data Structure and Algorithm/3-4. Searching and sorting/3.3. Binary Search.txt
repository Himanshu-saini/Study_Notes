=============
Binary search
=============
- On sorted data structure
- Comcept of Divide and Conquer
- Let the elements in Data structure be N.
- Divide the array in 3 parts
  - Left array: 0- (N/2-1)
  - Mid element: N/2 
  - Rigth array: (N/2+1) - N 
- Compare the searched element with the Mid-element 
- If searched element is equal to teh mid element,
  searching stops as required element is found
- if searched element is smaller than Mid-element 
  then perform searching on left half array 
  else perform searching on rigth half array 

- The Searched area becomes half after each iteration
- Time complexity: O( log2(N) )
- Space complexity: O(1)
- Ex.
  // Recursive Function
  int binarySearch(int* arr, int start, int end,int item){
    if (start > end)
      return -1;
	int mid = (int) ((start+end)/2);
	if(arr[mid] == item)
	  return mid;
	else if (srr[mid] > item)  // left part
	  return binarySearch(arr,start,mid-1,item);
	else // right part 
	  return binarySearch(arr,mid+1,end, item);
  }
  OR 
  // Iterative Function
  int binarySearch(int* arr, int N,int item){
    int start = 0,end=N;
	while(start <= end){
	  int mid = (int) ((start+end)/2);
	  if(arr[mid] == item)
	    return mid;
	  else if (srr[mid] > item)  // left part
	    end=mid-1;
	  else // right part 
	    start=mid+1;
	}
	return -1;
  }
	
Example Problems
=================
- Find element in sorted and rotated array 
  - The array is sorted (suppose in ascending order) 
    but is left rotaed or right rotated certain times.
  - Find Pivot element where the array divides
    into 2 sorted array 
	- Check Mid-element
	- If arr[mid] > arr[mid+1]
	  pivot = mid+1
	- If arr[mid-1] > arr[mid]
	  pivot = mid
	- if arr[0] > arr[mid]  // i.e., left half array is unsorted
	  search pivot in left half of array 
	- else if arr[0] < arr[mid]  //i.e.., left half array is sorted
	  search pivot in right half of array
	- else if start > end  // Base Condition 
	  stop // No pivot
  - The pivot element divided the array into 2 sorted array  
  - perform Binary Search of the 2 sorted array
    - if arr[0] < item < arr[pivot-1]
	  or simply arr[0] < item
	  search in left sorted array 
    - if arr[pivot] < item < arr[N-1]
	  or simply arr[N-1] > item 
	  search in right sorted array 
	  
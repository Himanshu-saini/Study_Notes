============
Merge Sort
============

- It is stable algorithm i.e., it preserves the order of element 
  in case of duplicate numbers
- Divide and Conquer Algo

Steps
------
- We divide the array into two equal parts from mid
- These two parts are furher divided into 2 parts 
- This is further divided into until only 1 element remains
- Then the last 2 parts are merged together according to their 
  currect position to get a sorted array 
- We keep merging these sorted arrays to get a large sorted array.

Code
----

void mergeArray(int arr[], int left, int mid, int right){
  int n1 = mid-left+1, n2 = right-mid;
  int i,j,k;
  int leftArr[n1],rightArr[n2];
  
  for(i=0;i<n1;i++)
    leftArr[i] = arr[left+i];
  for(i=0;i<n2;i++)
    rightArr[i] = arr[mid+i+1];
  
  i=0,j=0,k=left;
  while(j<n1 && n<n2){
    if(leftArr[i] <= rightArr[j]){
	  arr[k++] = leftArr[i++];
	}
	else
	  arr[k++] = rightArr[j++];
  }
  while(i<n1)
    arr[k++] = leftArr[i++];
  while(j<n2)
    arr[k++] = rightArr[j++];
}

void mergeSort(int arr[], int left, int right){
  if(left >= right)
    return;
  int mid = left + (right-left)/2;
  mergeSort(arr, left, mid);
  mergeSort(arr, mid+1, right);
  mergeArray(arr, left, mid, right);
}

Complexity
------------
- Time complexity:
  - Eq. = T(n) = 2 * T(n/2) + n
  - Best case = Worst case = O(nlogn)

- Space Complexity = O(n)  // using temp array to store values
